//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace EZTutor.Data.Remote.Datasets {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("EZTutorDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class EZTutorDataSet : global::System.Data.DataSet {
        
        private EZ_instructorsDataTable tableEZ_instructors;
        
        private TopicsDataTable tableTopics;
        
        private Ez_student_privsDataTable tableEz_student_privs;
        
        private Ez_studentsDataTable tableEz_students;
        
        private Ez_topic_contentsDataTable tableEz_topic_contents;
        
        private Ez_topic_lecturesDataTable tableEz_topic_lectures;
        
        private Ez_topicsDataTable tableEz_topics;
        
        private EZ_univsDataTable tableEZ_univs;
        
        private LecturesDataTable tableLectures;
        
        private SlidesDataTable tableSlides;
        
        private global::System.Data.DataRelation relationFK_ez_inst;
        
        private global::System.Data.DataRelation relationFK_ez_lec;
        
        private global::System.Data.DataRelation relationFK_ez_lec_inst;
        
        private global::System.Data.DataRelation relationFK_ez_topics;
        
        private global::System.Data.DataRelation relationFK_Slides_Lectures;
        
        private global::System.Data.DataRelation relationFK_Slides_Topics;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EZTutorDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected EZTutorDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["EZ_instructors"] != null)) {
                    base.Tables.Add(new EZ_instructorsDataTable(ds.Tables["EZ_instructors"]));
                }
                if ((ds.Tables["Topics"] != null)) {
                    base.Tables.Add(new TopicsDataTable(ds.Tables["Topics"]));
                }
                if ((ds.Tables["Ez_student_privs"] != null)) {
                    base.Tables.Add(new Ez_student_privsDataTable(ds.Tables["Ez_student_privs"]));
                }
                if ((ds.Tables["Ez_students"] != null)) {
                    base.Tables.Add(new Ez_studentsDataTable(ds.Tables["Ez_students"]));
                }
                if ((ds.Tables["Ez_topic_contents"] != null)) {
                    base.Tables.Add(new Ez_topic_contentsDataTable(ds.Tables["Ez_topic_contents"]));
                }
                if ((ds.Tables["Ez_topic_lectures"] != null)) {
                    base.Tables.Add(new Ez_topic_lecturesDataTable(ds.Tables["Ez_topic_lectures"]));
                }
                if ((ds.Tables["Ez_topics"] != null)) {
                    base.Tables.Add(new Ez_topicsDataTable(ds.Tables["Ez_topics"]));
                }
                if ((ds.Tables["EZ_univs"] != null)) {
                    base.Tables.Add(new EZ_univsDataTable(ds.Tables["EZ_univs"]));
                }
                if ((ds.Tables["Lectures"] != null)) {
                    base.Tables.Add(new LecturesDataTable(ds.Tables["Lectures"]));
                }
                if ((ds.Tables["Slides"] != null)) {
                    base.Tables.Add(new SlidesDataTable(ds.Tables["Slides"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EZ_instructorsDataTable EZ_instructors {
            get {
                return this.tableEZ_instructors;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TopicsDataTable Topics {
            get {
                return this.tableTopics;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Ez_student_privsDataTable Ez_student_privs {
            get {
                return this.tableEz_student_privs;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Ez_studentsDataTable Ez_students {
            get {
                return this.tableEz_students;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Ez_topic_contentsDataTable Ez_topic_contents {
            get {
                return this.tableEz_topic_contents;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Ez_topic_lecturesDataTable Ez_topic_lectures {
            get {
                return this.tableEz_topic_lectures;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Ez_topicsDataTable Ez_topics {
            get {
                return this.tableEz_topics;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EZ_univsDataTable EZ_univs {
            get {
                return this.tableEZ_univs;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LecturesDataTable Lectures {
            get {
                return this.tableLectures;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SlidesDataTable Slides {
            get {
                return this.tableSlides;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            EZTutorDataSet cln = ((EZTutorDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["EZ_instructors"] != null)) {
                    base.Tables.Add(new EZ_instructorsDataTable(ds.Tables["EZ_instructors"]));
                }
                if ((ds.Tables["Topics"] != null)) {
                    base.Tables.Add(new TopicsDataTable(ds.Tables["Topics"]));
                }
                if ((ds.Tables["Ez_student_privs"] != null)) {
                    base.Tables.Add(new Ez_student_privsDataTable(ds.Tables["Ez_student_privs"]));
                }
                if ((ds.Tables["Ez_students"] != null)) {
                    base.Tables.Add(new Ez_studentsDataTable(ds.Tables["Ez_students"]));
                }
                if ((ds.Tables["Ez_topic_contents"] != null)) {
                    base.Tables.Add(new Ez_topic_contentsDataTable(ds.Tables["Ez_topic_contents"]));
                }
                if ((ds.Tables["Ez_topic_lectures"] != null)) {
                    base.Tables.Add(new Ez_topic_lecturesDataTable(ds.Tables["Ez_topic_lectures"]));
                }
                if ((ds.Tables["Ez_topics"] != null)) {
                    base.Tables.Add(new Ez_topicsDataTable(ds.Tables["Ez_topics"]));
                }
                if ((ds.Tables["EZ_univs"] != null)) {
                    base.Tables.Add(new EZ_univsDataTable(ds.Tables["EZ_univs"]));
                }
                if ((ds.Tables["Lectures"] != null)) {
                    base.Tables.Add(new LecturesDataTable(ds.Tables["Lectures"]));
                }
                if ((ds.Tables["Slides"] != null)) {
                    base.Tables.Add(new SlidesDataTable(ds.Tables["Slides"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableEZ_instructors = ((EZ_instructorsDataTable)(base.Tables["EZ_instructors"]));
            if ((initTable == true)) {
                if ((this.tableEZ_instructors != null)) {
                    this.tableEZ_instructors.InitVars();
                }
            }
            this.tableTopics = ((TopicsDataTable)(base.Tables["Topics"]));
            if ((initTable == true)) {
                if ((this.tableTopics != null)) {
                    this.tableTopics.InitVars();
                }
            }
            this.tableEz_student_privs = ((Ez_student_privsDataTable)(base.Tables["Ez_student_privs"]));
            if ((initTable == true)) {
                if ((this.tableEz_student_privs != null)) {
                    this.tableEz_student_privs.InitVars();
                }
            }
            this.tableEz_students = ((Ez_studentsDataTable)(base.Tables["Ez_students"]));
            if ((initTable == true)) {
                if ((this.tableEz_students != null)) {
                    this.tableEz_students.InitVars();
                }
            }
            this.tableEz_topic_contents = ((Ez_topic_contentsDataTable)(base.Tables["Ez_topic_contents"]));
            if ((initTable == true)) {
                if ((this.tableEz_topic_contents != null)) {
                    this.tableEz_topic_contents.InitVars();
                }
            }
            this.tableEz_topic_lectures = ((Ez_topic_lecturesDataTable)(base.Tables["Ez_topic_lectures"]));
            if ((initTable == true)) {
                if ((this.tableEz_topic_lectures != null)) {
                    this.tableEz_topic_lectures.InitVars();
                }
            }
            this.tableEz_topics = ((Ez_topicsDataTable)(base.Tables["Ez_topics"]));
            if ((initTable == true)) {
                if ((this.tableEz_topics != null)) {
                    this.tableEz_topics.InitVars();
                }
            }
            this.tableEZ_univs = ((EZ_univsDataTable)(base.Tables["EZ_univs"]));
            if ((initTable == true)) {
                if ((this.tableEZ_univs != null)) {
                    this.tableEZ_univs.InitVars();
                }
            }
            this.tableLectures = ((LecturesDataTable)(base.Tables["Lectures"]));
            if ((initTable == true)) {
                if ((this.tableLectures != null)) {
                    this.tableLectures.InitVars();
                }
            }
            this.tableSlides = ((SlidesDataTable)(base.Tables["Slides"]));
            if ((initTable == true)) {
                if ((this.tableSlides != null)) {
                    this.tableSlides.InitVars();
                }
            }
            this.relationFK_ez_inst = this.Relations["FK_ez_inst"];
            this.relationFK_ez_lec = this.Relations["FK_ez_lec"];
            this.relationFK_ez_lec_inst = this.Relations["FK_ez_lec_inst"];
            this.relationFK_ez_topics = this.Relations["FK_ez_topics"];
            this.relationFK_Slides_Lectures = this.Relations["FK_Slides_Lectures"];
            this.relationFK_Slides_Topics = this.Relations["FK_Slides_Topics"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "EZTutorDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/EZTutor.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableEZ_instructors = new EZ_instructorsDataTable();
            base.Tables.Add(this.tableEZ_instructors);
            this.tableTopics = new TopicsDataTable();
            base.Tables.Add(this.tableTopics);
            this.tableEz_student_privs = new Ez_student_privsDataTable();
            base.Tables.Add(this.tableEz_student_privs);
            this.tableEz_students = new Ez_studentsDataTable();
            base.Tables.Add(this.tableEz_students);
            this.tableEz_topic_contents = new Ez_topic_contentsDataTable();
            base.Tables.Add(this.tableEz_topic_contents);
            this.tableEz_topic_lectures = new Ez_topic_lecturesDataTable();
            base.Tables.Add(this.tableEz_topic_lectures);
            this.tableEz_topics = new Ez_topicsDataTable();
            base.Tables.Add(this.tableEz_topics);
            this.tableEZ_univs = new EZ_univsDataTable();
            base.Tables.Add(this.tableEZ_univs);
            this.tableLectures = new LecturesDataTable();
            base.Tables.Add(this.tableLectures);
            this.tableSlides = new SlidesDataTable();
            base.Tables.Add(this.tableSlides);
            this.relationFK_ez_inst = new global::System.Data.DataRelation("FK_ez_inst", new global::System.Data.DataColumn[] {
                        this.tableEZ_univs.univ_codeColumn,
                        this.tableEZ_univs.college_codeColumn}, new global::System.Data.DataColumn[] {
                        this.tableEZ_instructors.univ_codeColumn,
                        this.tableEZ_instructors.college_codeColumn}, false);
            this.Relations.Add(this.relationFK_ez_inst);
            this.relationFK_ez_lec = new global::System.Data.DataRelation("FK_ez_lec", new global::System.Data.DataColumn[] {
                        this.tableEz_topic_contents.univ_codeColumn,
                        this.tableEz_topic_contents.college_codeColumn,
                        this.tableEz_topic_contents.topic_codeColumn,
                        this.tableEz_topic_contents.topic_content_codeColumn}, new global::System.Data.DataColumn[] {
                        this.tableEz_topic_lectures.univ_codeColumn,
                        this.tableEz_topic_lectures.college_codeColumn,
                        this.tableEz_topic_lectures.topic_codeColumn,
                        this.tableEz_topic_lectures.topic_content_codeColumn}, false);
            this.Relations.Add(this.relationFK_ez_lec);
            this.relationFK_ez_lec_inst = new global::System.Data.DataRelation("FK_ez_lec_inst", new global::System.Data.DataColumn[] {
                        this.tableEZ_instructors.univ_codeColumn,
                        this.tableEZ_instructors.college_codeColumn,
                        this.tableEZ_instructors.inst_codeColumn}, new global::System.Data.DataColumn[] {
                        this.tableEz_topic_lectures.univ_code_instColumn,
                        this.tableEz_topic_lectures.college_code_instColumn,
                        this.tableEz_topic_lectures.inst_codeColumn}, false);
            this.Relations.Add(this.relationFK_ez_lec_inst);
            this.relationFK_ez_topics = new global::System.Data.DataRelation("FK_ez_topics", new global::System.Data.DataColumn[] {
                        this.tableEZ_univs.univ_codeColumn,
                        this.tableEZ_univs.college_codeColumn}, new global::System.Data.DataColumn[] {
                        this.tableEz_topics.univ_codeColumn,
                        this.tableEz_topics.college_codeColumn}, false);
            this.Relations.Add(this.relationFK_ez_topics);
            this.relationFK_Slides_Lectures = new global::System.Data.DataRelation("FK_Slides_Lectures", new global::System.Data.DataColumn[] {
                        this.tableLectures.LectureIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableSlides.LectureIDColumn}, false);
            this.Relations.Add(this.relationFK_Slides_Lectures);
            this.relationFK_Slides_Topics = new global::System.Data.DataRelation("FK_Slides_Topics", new global::System.Data.DataColumn[] {
                        this.tableTopics.TopicIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableSlides.TopicIDColumn}, false);
            this.Relations.Add(this.relationFK_Slides_Topics);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEZ_instructors() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTopics() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEz_student_privs() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEz_students() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEz_topic_contents() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEz_topic_lectures() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEz_topics() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEZ_univs() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLectures() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSlides() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            EZTutorDataSet ds = new EZTutorDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void EZ_instructorsRowChangeEventHandler(object sender, EZ_instructorsRowChangeEvent e);
        
        public delegate void TopicsRowChangeEventHandler(object sender, TopicsRowChangeEvent e);
        
        public delegate void Ez_student_privsRowChangeEventHandler(object sender, Ez_student_privsRowChangeEvent e);
        
        public delegate void Ez_studentsRowChangeEventHandler(object sender, Ez_studentsRowChangeEvent e);
        
        public delegate void Ez_topic_contentsRowChangeEventHandler(object sender, Ez_topic_contentsRowChangeEvent e);
        
        public delegate void Ez_topic_lecturesRowChangeEventHandler(object sender, Ez_topic_lecturesRowChangeEvent e);
        
        public delegate void Ez_topicsRowChangeEventHandler(object sender, Ez_topicsRowChangeEvent e);
        
        public delegate void EZ_univsRowChangeEventHandler(object sender, EZ_univsRowChangeEvent e);
        
        public delegate void LecturesRowChangeEventHandler(object sender, LecturesRowChangeEvent e);
        
        public delegate void SlidesRowChangeEventHandler(object sender, SlidesRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EZ_instructorsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columninst_code;
            
            private global::System.Data.DataColumn columninst_name;
            
            private global::System.Data.DataColumn columnactive;
            
            private global::System.Data.DataColumn columnuniv_code;
            
            private global::System.Data.DataColumn columncollege_code;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EZ_instructorsDataTable() {
                this.TableName = "EZ_instructors";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EZ_instructorsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EZ_instructorsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inst_codeColumn {
                get {
                    return this.columninst_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inst_nameColumn {
                get {
                    return this.columninst_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn activeColumn {
                get {
                    return this.columnactive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn univ_codeColumn {
                get {
                    return this.columnuniv_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn college_codeColumn {
                get {
                    return this.columncollege_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EZ_instructorsRow this[int index] {
                get {
                    return ((EZ_instructorsRow)(this.Rows[index]));
                }
            }
            
            public event EZ_instructorsRowChangeEventHandler EZ_instructorsRowChanging;
            
            public event EZ_instructorsRowChangeEventHandler EZ_instructorsRowChanged;
            
            public event EZ_instructorsRowChangeEventHandler EZ_instructorsRowDeleting;
            
            public event EZ_instructorsRowChangeEventHandler EZ_instructorsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEZ_instructorsRow(EZ_instructorsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EZ_instructorsRow AddEZ_instructorsRow(string inst_code, string inst_name, string active, string univ_code, string college_code) {
                EZ_instructorsRow rowEZ_instructorsRow = ((EZ_instructorsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        inst_code,
                        inst_name,
                        active,
                        univ_code,
                        college_code};
                rowEZ_instructorsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEZ_instructorsRow);
                return rowEZ_instructorsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EZ_instructorsRow FindByinst_codeuniv_codecollege_code(string inst_code, string univ_code, string college_code) {
                return ((EZ_instructorsRow)(this.Rows.Find(new object[] {
                            inst_code,
                            univ_code,
                            college_code})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EZ_instructorsDataTable cln = ((EZ_instructorsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EZ_instructorsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columninst_code = base.Columns["inst_code"];
                this.columninst_name = base.Columns["inst_name"];
                this.columnactive = base.Columns["active"];
                this.columnuniv_code = base.Columns["univ_code"];
                this.columncollege_code = base.Columns["college_code"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columninst_code = new global::System.Data.DataColumn("inst_code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninst_code);
                this.columninst_name = new global::System.Data.DataColumn("inst_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninst_name);
                this.columnactive = new global::System.Data.DataColumn("active", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnactive);
                this.columnuniv_code = new global::System.Data.DataColumn("univ_code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuniv_code);
                this.columncollege_code = new global::System.Data.DataColumn("college_code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncollege_code);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columninst_code,
                                this.columnuniv_code,
                                this.columncollege_code}, true));
                this.columninst_code.AllowDBNull = false;
                this.columninst_code.MaxLength = 4;
                this.columninst_name.AllowDBNull = false;
                this.columninst_name.MaxLength = 50;
                this.columnactive.AllowDBNull = false;
                this.columnactive.MaxLength = 1;
                this.columnuniv_code.AllowDBNull = false;
                this.columnuniv_code.MaxLength = 3;
                this.columncollege_code.AllowDBNull = false;
                this.columncollege_code.MaxLength = 2;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EZ_instructorsRow NewEZ_instructorsRow() {
                return ((EZ_instructorsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EZ_instructorsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EZ_instructorsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EZ_instructorsRowChanged != null)) {
                    this.EZ_instructorsRowChanged(this, new EZ_instructorsRowChangeEvent(((EZ_instructorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EZ_instructorsRowChanging != null)) {
                    this.EZ_instructorsRowChanging(this, new EZ_instructorsRowChangeEvent(((EZ_instructorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EZ_instructorsRowDeleted != null)) {
                    this.EZ_instructorsRowDeleted(this, new EZ_instructorsRowChangeEvent(((EZ_instructorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EZ_instructorsRowDeleting != null)) {
                    this.EZ_instructorsRowDeleting(this, new EZ_instructorsRowChangeEvent(((EZ_instructorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEZ_instructorsRow(EZ_instructorsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EZTutorDataSet ds = new EZTutorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EZ_instructorsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TopicsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTopicID;
            
            private global::System.Data.DataColumn columnTopicName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TopicsDataTable() {
                this.TableName = "Topics";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TopicsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TopicsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TopicIDColumn {
                get {
                    return this.columnTopicID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TopicNameColumn {
                get {
                    return this.columnTopicName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TopicsRow this[int index] {
                get {
                    return ((TopicsRow)(this.Rows[index]));
                }
            }
            
            public event TopicsRowChangeEventHandler TopicsRowChanging;
            
            public event TopicsRowChangeEventHandler TopicsRowChanged;
            
            public event TopicsRowChangeEventHandler TopicsRowDeleting;
            
            public event TopicsRowChangeEventHandler TopicsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTopicsRow(TopicsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TopicsRow AddTopicsRow(System.Guid TopicID, string TopicName) {
                TopicsRow rowTopicsRow = ((TopicsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TopicID,
                        TopicName};
                rowTopicsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTopicsRow);
                return rowTopicsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TopicsRow FindByTopicID(System.Guid TopicID) {
                return ((TopicsRow)(this.Rows.Find(new object[] {
                            TopicID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TopicsDataTable cln = ((TopicsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TopicsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTopicID = base.Columns["TopicID"];
                this.columnTopicName = base.Columns["TopicName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTopicID = new global::System.Data.DataColumn("TopicID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTopicID);
                this.columnTopicName = new global::System.Data.DataColumn("TopicName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTopicName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTopicID}, true));
                this.columnTopicID.AllowDBNull = false;
                this.columnTopicID.Unique = true;
                this.columnTopicName.AllowDBNull = false;
                this.columnTopicName.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TopicsRow NewTopicsRow() {
                return ((TopicsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TopicsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TopicsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TopicsRowChanged != null)) {
                    this.TopicsRowChanged(this, new TopicsRowChangeEvent(((TopicsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TopicsRowChanging != null)) {
                    this.TopicsRowChanging(this, new TopicsRowChangeEvent(((TopicsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TopicsRowDeleted != null)) {
                    this.TopicsRowDeleted(this, new TopicsRowChangeEvent(((TopicsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TopicsRowDeleting != null)) {
                    this.TopicsRowDeleting(this, new TopicsRowChangeEvent(((TopicsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTopicsRow(TopicsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EZTutorDataSet ds = new EZTutorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TopicsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Ez_student_privsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnstudent_code;
            
            private global::System.Data.DataColumn columnstudent_priv;
            
            private global::System.Data.DataColumn columninst_code;
            
            private global::System.Data.DataColumn columnuniv_code;
            
            private global::System.Data.DataColumn columncollege_code;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_student_privsDataTable() {
                this.TableName = "Ez_student_privs";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Ez_student_privsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Ez_student_privsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn student_codeColumn {
                get {
                    return this.columnstudent_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn student_privColumn {
                get {
                    return this.columnstudent_priv;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inst_codeColumn {
                get {
                    return this.columninst_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn univ_codeColumn {
                get {
                    return this.columnuniv_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn college_codeColumn {
                get {
                    return this.columncollege_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_student_privsRow this[int index] {
                get {
                    return ((Ez_student_privsRow)(this.Rows[index]));
                }
            }
            
            public event Ez_student_privsRowChangeEventHandler Ez_student_privsRowChanging;
            
            public event Ez_student_privsRowChangeEventHandler Ez_student_privsRowChanged;
            
            public event Ez_student_privsRowChangeEventHandler Ez_student_privsRowDeleting;
            
            public event Ez_student_privsRowChangeEventHandler Ez_student_privsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEz_student_privsRow(Ez_student_privsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_student_privsRow AddEz_student_privsRow(string student_code, string student_priv, string inst_code, string univ_code, string college_code) {
                Ez_student_privsRow rowEz_student_privsRow = ((Ez_student_privsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        student_code,
                        student_priv,
                        inst_code,
                        univ_code,
                        college_code};
                rowEz_student_privsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEz_student_privsRow);
                return rowEz_student_privsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_student_privsRow FindBystudent_codeinst_codeuniv_codecollege_code(string student_code, string inst_code, string univ_code, string college_code) {
                return ((Ez_student_privsRow)(this.Rows.Find(new object[] {
                            student_code,
                            inst_code,
                            univ_code,
                            college_code})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Ez_student_privsDataTable cln = ((Ez_student_privsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Ez_student_privsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnstudent_code = base.Columns["student_code"];
                this.columnstudent_priv = base.Columns["student_priv"];
                this.columninst_code = base.Columns["inst_code"];
                this.columnuniv_code = base.Columns["univ_code"];
                this.columncollege_code = base.Columns["college_code"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnstudent_code = new global::System.Data.DataColumn("student_code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstudent_code);
                this.columnstudent_priv = new global::System.Data.DataColumn("student_priv", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstudent_priv);
                this.columninst_code = new global::System.Data.DataColumn("inst_code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninst_code);
                this.columnuniv_code = new global::System.Data.DataColumn("univ_code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuniv_code);
                this.columncollege_code = new global::System.Data.DataColumn("college_code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncollege_code);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnstudent_code,
                                this.columninst_code,
                                this.columnuniv_code,
                                this.columncollege_code}, true));
                this.columnstudent_code.AllowDBNull = false;
                this.columnstudent_code.MaxLength = 4;
                this.columnstudent_priv.AllowDBNull = false;
                this.columnstudent_priv.MaxLength = 1;
                this.columninst_code.AllowDBNull = false;
                this.columninst_code.MaxLength = 4;
                this.columnuniv_code.AllowDBNull = false;
                this.columnuniv_code.MaxLength = 3;
                this.columncollege_code.AllowDBNull = false;
                this.columncollege_code.MaxLength = 2;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_student_privsRow NewEz_student_privsRow() {
                return ((Ez_student_privsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Ez_student_privsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Ez_student_privsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Ez_student_privsRowChanged != null)) {
                    this.Ez_student_privsRowChanged(this, new Ez_student_privsRowChangeEvent(((Ez_student_privsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Ez_student_privsRowChanging != null)) {
                    this.Ez_student_privsRowChanging(this, new Ez_student_privsRowChangeEvent(((Ez_student_privsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Ez_student_privsRowDeleted != null)) {
                    this.Ez_student_privsRowDeleted(this, new Ez_student_privsRowChangeEvent(((Ez_student_privsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Ez_student_privsRowDeleting != null)) {
                    this.Ez_student_privsRowDeleting(this, new Ez_student_privsRowChangeEvent(((Ez_student_privsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEz_student_privsRow(Ez_student_privsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EZTutorDataSet ds = new EZTutorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Ez_student_privsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Ez_studentsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnstudent_code;
            
            private global::System.Data.DataColumn columnstudent_name;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_studentsDataTable() {
                this.TableName = "Ez_students";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Ez_studentsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Ez_studentsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn student_codeColumn {
                get {
                    return this.columnstudent_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn student_nameColumn {
                get {
                    return this.columnstudent_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_studentsRow this[int index] {
                get {
                    return ((Ez_studentsRow)(this.Rows[index]));
                }
            }
            
            public event Ez_studentsRowChangeEventHandler Ez_studentsRowChanging;
            
            public event Ez_studentsRowChangeEventHandler Ez_studentsRowChanged;
            
            public event Ez_studentsRowChangeEventHandler Ez_studentsRowDeleting;
            
            public event Ez_studentsRowChangeEventHandler Ez_studentsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEz_studentsRow(Ez_studentsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_studentsRow AddEz_studentsRow(string student_code, string student_name) {
                Ez_studentsRow rowEz_studentsRow = ((Ez_studentsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        student_code,
                        student_name};
                rowEz_studentsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEz_studentsRow);
                return rowEz_studentsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_studentsRow FindBystudent_code(string student_code) {
                return ((Ez_studentsRow)(this.Rows.Find(new object[] {
                            student_code})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Ez_studentsDataTable cln = ((Ez_studentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Ez_studentsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnstudent_code = base.Columns["student_code"];
                this.columnstudent_name = base.Columns["student_name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnstudent_code = new global::System.Data.DataColumn("student_code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstudent_code);
                this.columnstudent_name = new global::System.Data.DataColumn("student_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstudent_name);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnstudent_code}, true));
                this.columnstudent_code.AllowDBNull = false;
                this.columnstudent_code.Unique = true;
                this.columnstudent_code.MaxLength = 4;
                this.columnstudent_name.AllowDBNull = false;
                this.columnstudent_name.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_studentsRow NewEz_studentsRow() {
                return ((Ez_studentsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Ez_studentsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Ez_studentsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Ez_studentsRowChanged != null)) {
                    this.Ez_studentsRowChanged(this, new Ez_studentsRowChangeEvent(((Ez_studentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Ez_studentsRowChanging != null)) {
                    this.Ez_studentsRowChanging(this, new Ez_studentsRowChangeEvent(((Ez_studentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Ez_studentsRowDeleted != null)) {
                    this.Ez_studentsRowDeleted(this, new Ez_studentsRowChangeEvent(((Ez_studentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Ez_studentsRowDeleting != null)) {
                    this.Ez_studentsRowDeleting(this, new Ez_studentsRowChangeEvent(((Ez_studentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEz_studentsRow(Ez_studentsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EZTutorDataSet ds = new EZTutorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Ez_studentsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Ez_topic_contentsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columntopic_code;
            
            private global::System.Data.DataColumn columntopic_content_code;
            
            private global::System.Data.DataColumn columncontent_title;
            
            private global::System.Data.DataColumn columnuniv_code;
            
            private global::System.Data.DataColumn columncollege_code;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_topic_contentsDataTable() {
                this.TableName = "Ez_topic_contents";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Ez_topic_contentsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Ez_topic_contentsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn topic_codeColumn {
                get {
                    return this.columntopic_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn topic_content_codeColumn {
                get {
                    return this.columntopic_content_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn content_titleColumn {
                get {
                    return this.columncontent_title;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn univ_codeColumn {
                get {
                    return this.columnuniv_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn college_codeColumn {
                get {
                    return this.columncollege_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_topic_contentsRow this[int index] {
                get {
                    return ((Ez_topic_contentsRow)(this.Rows[index]));
                }
            }
            
            public event Ez_topic_contentsRowChangeEventHandler Ez_topic_contentsRowChanging;
            
            public event Ez_topic_contentsRowChangeEventHandler Ez_topic_contentsRowChanged;
            
            public event Ez_topic_contentsRowChangeEventHandler Ez_topic_contentsRowDeleting;
            
            public event Ez_topic_contentsRowChangeEventHandler Ez_topic_contentsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEz_topic_contentsRow(Ez_topic_contentsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_topic_contentsRow AddEz_topic_contentsRow(string topic_code, string topic_content_code, string content_title, string univ_code, string college_code) {
                Ez_topic_contentsRow rowEz_topic_contentsRow = ((Ez_topic_contentsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        topic_code,
                        topic_content_code,
                        content_title,
                        univ_code,
                        college_code};
                rowEz_topic_contentsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEz_topic_contentsRow);
                return rowEz_topic_contentsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_topic_contentsRow FindBytopic_codetopic_content_codeuniv_codecollege_code(string topic_code, string topic_content_code, string univ_code, string college_code) {
                return ((Ez_topic_contentsRow)(this.Rows.Find(new object[] {
                            topic_code,
                            topic_content_code,
                            univ_code,
                            college_code})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Ez_topic_contentsDataTable cln = ((Ez_topic_contentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Ez_topic_contentsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntopic_code = base.Columns["topic_code"];
                this.columntopic_content_code = base.Columns["topic_content_code"];
                this.columncontent_title = base.Columns["content_title"];
                this.columnuniv_code = base.Columns["univ_code"];
                this.columncollege_code = base.Columns["college_code"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntopic_code = new global::System.Data.DataColumn("topic_code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntopic_code);
                this.columntopic_content_code = new global::System.Data.DataColumn("topic_content_code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntopic_content_code);
                this.columncontent_title = new global::System.Data.DataColumn("content_title", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncontent_title);
                this.columnuniv_code = new global::System.Data.DataColumn("univ_code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuniv_code);
                this.columncollege_code = new global::System.Data.DataColumn("college_code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncollege_code);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columntopic_code,
                                this.columntopic_content_code,
                                this.columnuniv_code,
                                this.columncollege_code}, true));
                this.columntopic_code.AllowDBNull = false;
                this.columntopic_code.MaxLength = 2;
                this.columntopic_content_code.AllowDBNull = false;
                this.columntopic_content_code.MaxLength = 3;
                this.columncontent_title.AllowDBNull = false;
                this.columncontent_title.MaxLength = 50;
                this.columnuniv_code.AllowDBNull = false;
                this.columnuniv_code.MaxLength = 3;
                this.columncollege_code.AllowDBNull = false;
                this.columncollege_code.MaxLength = 2;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_topic_contentsRow NewEz_topic_contentsRow() {
                return ((Ez_topic_contentsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Ez_topic_contentsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Ez_topic_contentsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Ez_topic_contentsRowChanged != null)) {
                    this.Ez_topic_contentsRowChanged(this, new Ez_topic_contentsRowChangeEvent(((Ez_topic_contentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Ez_topic_contentsRowChanging != null)) {
                    this.Ez_topic_contentsRowChanging(this, new Ez_topic_contentsRowChangeEvent(((Ez_topic_contentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Ez_topic_contentsRowDeleted != null)) {
                    this.Ez_topic_contentsRowDeleted(this, new Ez_topic_contentsRowChangeEvent(((Ez_topic_contentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Ez_topic_contentsRowDeleting != null)) {
                    this.Ez_topic_contentsRowDeleting(this, new Ez_topic_contentsRowChangeEvent(((Ez_topic_contentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEz_topic_contentsRow(Ez_topic_contentsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EZTutorDataSet ds = new EZTutorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Ez_topic_contentsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Ez_topic_lecturesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columntopic_code;
            
            private global::System.Data.DataColumn columntopic_content_code;
            
            private global::System.Data.DataColumn columnlec_code;
            
            private global::System.Data.DataColumn columnlec_title;
            
            private global::System.Data.DataColumn columnlec_subj1;
            
            private global::System.Data.DataColumn columnlec_subj2;
            
            private global::System.Data.DataColumn columnuniv_code;
            
            private global::System.Data.DataColumn columncollege_code;
            
            private global::System.Data.DataColumn columninst_code;
            
            private global::System.Data.DataColumn columnuniv_code_inst;
            
            private global::System.Data.DataColumn columncollege_code_inst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_topic_lecturesDataTable() {
                this.TableName = "Ez_topic_lectures";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Ez_topic_lecturesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Ez_topic_lecturesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn topic_codeColumn {
                get {
                    return this.columntopic_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn topic_content_codeColumn {
                get {
                    return this.columntopic_content_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lec_codeColumn {
                get {
                    return this.columnlec_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lec_titleColumn {
                get {
                    return this.columnlec_title;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lec_subj1Column {
                get {
                    return this.columnlec_subj1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lec_subj2Column {
                get {
                    return this.columnlec_subj2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn univ_codeColumn {
                get {
                    return this.columnuniv_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn college_codeColumn {
                get {
                    return this.columncollege_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inst_codeColumn {
                get {
                    return this.columninst_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn univ_code_instColumn {
                get {
                    return this.columnuniv_code_inst;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn college_code_instColumn {
                get {
                    return this.columncollege_code_inst;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_topic_lecturesRow this[int index] {
                get {
                    return ((Ez_topic_lecturesRow)(this.Rows[index]));
                }
            }
            
            public event Ez_topic_lecturesRowChangeEventHandler Ez_topic_lecturesRowChanging;
            
            public event Ez_topic_lecturesRowChangeEventHandler Ez_topic_lecturesRowChanged;
            
            public event Ez_topic_lecturesRowChangeEventHandler Ez_topic_lecturesRowDeleting;
            
            public event Ez_topic_lecturesRowChangeEventHandler Ez_topic_lecturesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEz_topic_lecturesRow(Ez_topic_lecturesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_topic_lecturesRow AddEz_topic_lecturesRow(string topic_code, string topic_content_code, string lec_code, string lec_title, string lec_subj1, string lec_subj2, string univ_code, string college_code, string inst_code, string univ_code_inst, string college_code_inst) {
                Ez_topic_lecturesRow rowEz_topic_lecturesRow = ((Ez_topic_lecturesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        topic_code,
                        topic_content_code,
                        lec_code,
                        lec_title,
                        lec_subj1,
                        lec_subj2,
                        univ_code,
                        college_code,
                        inst_code,
                        univ_code_inst,
                        college_code_inst};
                rowEz_topic_lecturesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEz_topic_lecturesRow);
                return rowEz_topic_lecturesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_topic_lecturesRow FindBytopic_codetopic_content_codelec_codeuniv_codecollege_code(string topic_code, string topic_content_code, string lec_code, string univ_code, string college_code) {
                return ((Ez_topic_lecturesRow)(this.Rows.Find(new object[] {
                            topic_code,
                            topic_content_code,
                            lec_code,
                            univ_code,
                            college_code})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Ez_topic_lecturesDataTable cln = ((Ez_topic_lecturesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Ez_topic_lecturesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntopic_code = base.Columns["topic_code"];
                this.columntopic_content_code = base.Columns["topic_content_code"];
                this.columnlec_code = base.Columns["lec_code"];
                this.columnlec_title = base.Columns["lec_title"];
                this.columnlec_subj1 = base.Columns["lec_subj1"];
                this.columnlec_subj2 = base.Columns["lec_subj2"];
                this.columnuniv_code = base.Columns["univ_code"];
                this.columncollege_code = base.Columns["college_code"];
                this.columninst_code = base.Columns["inst_code"];
                this.columnuniv_code_inst = base.Columns["univ_code_inst"];
                this.columncollege_code_inst = base.Columns["college_code_inst"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntopic_code = new global::System.Data.DataColumn("topic_code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntopic_code);
                this.columntopic_content_code = new global::System.Data.DataColumn("topic_content_code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntopic_content_code);
                this.columnlec_code = new global::System.Data.DataColumn("lec_code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlec_code);
                this.columnlec_title = new global::System.Data.DataColumn("lec_title", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlec_title);
                this.columnlec_subj1 = new global::System.Data.DataColumn("lec_subj1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlec_subj1);
                this.columnlec_subj2 = new global::System.Data.DataColumn("lec_subj2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlec_subj2);
                this.columnuniv_code = new global::System.Data.DataColumn("univ_code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuniv_code);
                this.columncollege_code = new global::System.Data.DataColumn("college_code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncollege_code);
                this.columninst_code = new global::System.Data.DataColumn("inst_code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninst_code);
                this.columnuniv_code_inst = new global::System.Data.DataColumn("univ_code_inst", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuniv_code_inst);
                this.columncollege_code_inst = new global::System.Data.DataColumn("college_code_inst", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncollege_code_inst);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columntopic_code,
                                this.columntopic_content_code,
                                this.columnlec_code,
                                this.columnuniv_code,
                                this.columncollege_code}, true));
                this.columntopic_code.AllowDBNull = false;
                this.columntopic_code.MaxLength = 2;
                this.columntopic_content_code.AllowDBNull = false;
                this.columntopic_content_code.MaxLength = 3;
                this.columnlec_code.AllowDBNull = false;
                this.columnlec_code.MaxLength = 2;
                this.columnlec_title.AllowDBNull = false;
                this.columnlec_title.MaxLength = 50;
                this.columnlec_subj1.MaxLength = 5000;
                this.columnlec_subj2.MaxLength = 5000;
                this.columnuniv_code.AllowDBNull = false;
                this.columnuniv_code.MaxLength = 3;
                this.columncollege_code.AllowDBNull = false;
                this.columncollege_code.MaxLength = 2;
                this.columninst_code.AllowDBNull = false;
                this.columninst_code.MaxLength = 4;
                this.columnuniv_code_inst.AllowDBNull = false;
                this.columnuniv_code_inst.MaxLength = 3;
                this.columncollege_code_inst.AllowDBNull = false;
                this.columncollege_code_inst.MaxLength = 2;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_topic_lecturesRow NewEz_topic_lecturesRow() {
                return ((Ez_topic_lecturesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Ez_topic_lecturesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Ez_topic_lecturesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Ez_topic_lecturesRowChanged != null)) {
                    this.Ez_topic_lecturesRowChanged(this, new Ez_topic_lecturesRowChangeEvent(((Ez_topic_lecturesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Ez_topic_lecturesRowChanging != null)) {
                    this.Ez_topic_lecturesRowChanging(this, new Ez_topic_lecturesRowChangeEvent(((Ez_topic_lecturesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Ez_topic_lecturesRowDeleted != null)) {
                    this.Ez_topic_lecturesRowDeleted(this, new Ez_topic_lecturesRowChangeEvent(((Ez_topic_lecturesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Ez_topic_lecturesRowDeleting != null)) {
                    this.Ez_topic_lecturesRowDeleting(this, new Ez_topic_lecturesRowChangeEvent(((Ez_topic_lecturesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEz_topic_lecturesRow(Ez_topic_lecturesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EZTutorDataSet ds = new EZTutorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Ez_topic_lecturesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Ez_topicsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columntopic_code;
            
            private global::System.Data.DataColumn columntopic_title;
            
            private global::System.Data.DataColumn columnuniv_code;
            
            private global::System.Data.DataColumn columncollege_code;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_topicsDataTable() {
                this.TableName = "Ez_topics";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Ez_topicsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Ez_topicsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn topic_codeColumn {
                get {
                    return this.columntopic_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn topic_titleColumn {
                get {
                    return this.columntopic_title;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn univ_codeColumn {
                get {
                    return this.columnuniv_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn college_codeColumn {
                get {
                    return this.columncollege_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_topicsRow this[int index] {
                get {
                    return ((Ez_topicsRow)(this.Rows[index]));
                }
            }
            
            public event Ez_topicsRowChangeEventHandler Ez_topicsRowChanging;
            
            public event Ez_topicsRowChangeEventHandler Ez_topicsRowChanged;
            
            public event Ez_topicsRowChangeEventHandler Ez_topicsRowDeleting;
            
            public event Ez_topicsRowChangeEventHandler Ez_topicsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEz_topicsRow(Ez_topicsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_topicsRow AddEz_topicsRow(string topic_code, string topic_title, string univ_code, string college_code) {
                Ez_topicsRow rowEz_topicsRow = ((Ez_topicsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        topic_code,
                        topic_title,
                        univ_code,
                        college_code};
                rowEz_topicsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEz_topicsRow);
                return rowEz_topicsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_topicsRow FindBytopic_codeuniv_codecollege_code(string topic_code, string univ_code, string college_code) {
                return ((Ez_topicsRow)(this.Rows.Find(new object[] {
                            topic_code,
                            univ_code,
                            college_code})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Ez_topicsDataTable cln = ((Ez_topicsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Ez_topicsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntopic_code = base.Columns["topic_code"];
                this.columntopic_title = base.Columns["topic_title"];
                this.columnuniv_code = base.Columns["univ_code"];
                this.columncollege_code = base.Columns["college_code"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntopic_code = new global::System.Data.DataColumn("topic_code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntopic_code);
                this.columntopic_title = new global::System.Data.DataColumn("topic_title", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntopic_title);
                this.columnuniv_code = new global::System.Data.DataColumn("univ_code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuniv_code);
                this.columncollege_code = new global::System.Data.DataColumn("college_code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncollege_code);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columntopic_code,
                                this.columnuniv_code,
                                this.columncollege_code}, true));
                this.columntopic_code.AllowDBNull = false;
                this.columntopic_code.MaxLength = 2;
                this.columntopic_title.AllowDBNull = false;
                this.columntopic_title.MaxLength = 50;
                this.columnuniv_code.AllowDBNull = false;
                this.columnuniv_code.MaxLength = 3;
                this.columncollege_code.AllowDBNull = false;
                this.columncollege_code.MaxLength = 2;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_topicsRow NewEz_topicsRow() {
                return ((Ez_topicsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Ez_topicsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Ez_topicsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Ez_topicsRowChanged != null)) {
                    this.Ez_topicsRowChanged(this, new Ez_topicsRowChangeEvent(((Ez_topicsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Ez_topicsRowChanging != null)) {
                    this.Ez_topicsRowChanging(this, new Ez_topicsRowChangeEvent(((Ez_topicsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Ez_topicsRowDeleted != null)) {
                    this.Ez_topicsRowDeleted(this, new Ez_topicsRowChangeEvent(((Ez_topicsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Ez_topicsRowDeleting != null)) {
                    this.Ez_topicsRowDeleting(this, new Ez_topicsRowChangeEvent(((Ez_topicsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEz_topicsRow(Ez_topicsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EZTutorDataSet ds = new EZTutorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Ez_topicsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EZ_univsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnuniv_code;
            
            private global::System.Data.DataColumn columnuniv_name;
            
            private global::System.Data.DataColumn columncollege_code;
            
            private global::System.Data.DataColumn columncollege_name;
            
            private global::System.Data.DataColumn columnnote;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EZ_univsDataTable() {
                this.TableName = "EZ_univs";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EZ_univsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EZ_univsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn univ_codeColumn {
                get {
                    return this.columnuniv_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn univ_nameColumn {
                get {
                    return this.columnuniv_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn college_codeColumn {
                get {
                    return this.columncollege_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn college_nameColumn {
                get {
                    return this.columncollege_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn noteColumn {
                get {
                    return this.columnnote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EZ_univsRow this[int index] {
                get {
                    return ((EZ_univsRow)(this.Rows[index]));
                }
            }
            
            public event EZ_univsRowChangeEventHandler EZ_univsRowChanging;
            
            public event EZ_univsRowChangeEventHandler EZ_univsRowChanged;
            
            public event EZ_univsRowChangeEventHandler EZ_univsRowDeleting;
            
            public event EZ_univsRowChangeEventHandler EZ_univsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEZ_univsRow(EZ_univsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EZ_univsRow AddEZ_univsRow(string univ_code, string univ_name, string college_code, string college_name, string note) {
                EZ_univsRow rowEZ_univsRow = ((EZ_univsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        univ_code,
                        univ_name,
                        college_code,
                        college_name,
                        note};
                rowEZ_univsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEZ_univsRow);
                return rowEZ_univsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EZ_univsRow FindByuniv_codecollege_code(string univ_code, string college_code) {
                return ((EZ_univsRow)(this.Rows.Find(new object[] {
                            univ_code,
                            college_code})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EZ_univsDataTable cln = ((EZ_univsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EZ_univsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnuniv_code = base.Columns["univ_code"];
                this.columnuniv_name = base.Columns["univ_name"];
                this.columncollege_code = base.Columns["college_code"];
                this.columncollege_name = base.Columns["college_name"];
                this.columnnote = base.Columns["note"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnuniv_code = new global::System.Data.DataColumn("univ_code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuniv_code);
                this.columnuniv_name = new global::System.Data.DataColumn("univ_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuniv_name);
                this.columncollege_code = new global::System.Data.DataColumn("college_code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncollege_code);
                this.columncollege_name = new global::System.Data.DataColumn("college_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncollege_name);
                this.columnnote = new global::System.Data.DataColumn("note", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnote);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnuniv_code,
                                this.columncollege_code}, true));
                this.columnuniv_code.AllowDBNull = false;
                this.columnuniv_code.MaxLength = 3;
                this.columnuniv_name.AllowDBNull = false;
                this.columnuniv_name.MaxLength = 50;
                this.columncollege_code.AllowDBNull = false;
                this.columncollege_code.MaxLength = 2;
                this.columncollege_name.AllowDBNull = false;
                this.columncollege_name.MaxLength = 50;
                this.columnnote.MaxLength = 2000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EZ_univsRow NewEZ_univsRow() {
                return ((EZ_univsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EZ_univsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EZ_univsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EZ_univsRowChanged != null)) {
                    this.EZ_univsRowChanged(this, new EZ_univsRowChangeEvent(((EZ_univsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EZ_univsRowChanging != null)) {
                    this.EZ_univsRowChanging(this, new EZ_univsRowChangeEvent(((EZ_univsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EZ_univsRowDeleted != null)) {
                    this.EZ_univsRowDeleted(this, new EZ_univsRowChangeEvent(((EZ_univsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EZ_univsRowDeleting != null)) {
                    this.EZ_univsRowDeleting(this, new EZ_univsRowChangeEvent(((EZ_univsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEZ_univsRow(EZ_univsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EZTutorDataSet ds = new EZTutorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EZ_univsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LecturesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnLectureID;
            
            private global::System.Data.DataColumn columnLectureName;
            
            private global::System.Data.DataColumn columnLectureWeek;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LecturesDataTable() {
                this.TableName = "Lectures";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LecturesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LecturesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LectureIDColumn {
                get {
                    return this.columnLectureID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LectureNameColumn {
                get {
                    return this.columnLectureName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LectureWeekColumn {
                get {
                    return this.columnLectureWeek;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LecturesRow this[int index] {
                get {
                    return ((LecturesRow)(this.Rows[index]));
                }
            }
            
            public event LecturesRowChangeEventHandler LecturesRowChanging;
            
            public event LecturesRowChangeEventHandler LecturesRowChanged;
            
            public event LecturesRowChangeEventHandler LecturesRowDeleting;
            
            public event LecturesRowChangeEventHandler LecturesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLecturesRow(LecturesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LecturesRow AddLecturesRow(System.Guid LectureID, string LectureName, int LectureWeek) {
                LecturesRow rowLecturesRow = ((LecturesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LectureID,
                        LectureName,
                        LectureWeek};
                rowLecturesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLecturesRow);
                return rowLecturesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LecturesRow FindByLectureID(System.Guid LectureID) {
                return ((LecturesRow)(this.Rows.Find(new object[] {
                            LectureID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LecturesDataTable cln = ((LecturesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LecturesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLectureID = base.Columns["LectureID"];
                this.columnLectureName = base.Columns["LectureName"];
                this.columnLectureWeek = base.Columns["LectureWeek"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLectureID = new global::System.Data.DataColumn("LectureID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLectureID);
                this.columnLectureName = new global::System.Data.DataColumn("LectureName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLectureName);
                this.columnLectureWeek = new global::System.Data.DataColumn("LectureWeek", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLectureWeek);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLectureID}, true));
                this.columnLectureID.AllowDBNull = false;
                this.columnLectureID.Unique = true;
                this.columnLectureName.AllowDBNull = false;
                this.columnLectureName.MaxLength = 20;
                this.columnLectureWeek.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LecturesRow NewLecturesRow() {
                return ((LecturesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LecturesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LecturesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LecturesRowChanged != null)) {
                    this.LecturesRowChanged(this, new LecturesRowChangeEvent(((LecturesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LecturesRowChanging != null)) {
                    this.LecturesRowChanging(this, new LecturesRowChangeEvent(((LecturesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LecturesRowDeleted != null)) {
                    this.LecturesRowDeleted(this, new LecturesRowChangeEvent(((LecturesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LecturesRowDeleting != null)) {
                    this.LecturesRowDeleting(this, new LecturesRowChangeEvent(((LecturesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLecturesRow(LecturesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EZTutorDataSet ds = new EZTutorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LecturesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SlidesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSlideID;
            
            private global::System.Data.DataColumn columnSlideName;
            
            private global::System.Data.DataColumn columnLectureID;
            
            private global::System.Data.DataColumn columnTopicID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SlidesDataTable() {
                this.TableName = "Slides";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SlidesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SlidesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SlideIDColumn {
                get {
                    return this.columnSlideID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SlideNameColumn {
                get {
                    return this.columnSlideName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LectureIDColumn {
                get {
                    return this.columnLectureID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TopicIDColumn {
                get {
                    return this.columnTopicID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SlidesRow this[int index] {
                get {
                    return ((SlidesRow)(this.Rows[index]));
                }
            }
            
            public event SlidesRowChangeEventHandler SlidesRowChanging;
            
            public event SlidesRowChangeEventHandler SlidesRowChanged;
            
            public event SlidesRowChangeEventHandler SlidesRowDeleting;
            
            public event SlidesRowChangeEventHandler SlidesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSlidesRow(SlidesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SlidesRow AddSlidesRow(System.Guid SlideID, string SlideName, LecturesRow parentLecturesRowByFK_Slides_Lectures, TopicsRow parentTopicsRowByFK_Slides_Topics) {
                SlidesRow rowSlidesRow = ((SlidesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SlideID,
                        SlideName,
                        null,
                        null};
                if ((parentLecturesRowByFK_Slides_Lectures != null)) {
                    columnValuesArray[2] = parentLecturesRowByFK_Slides_Lectures[0];
                }
                if ((parentTopicsRowByFK_Slides_Topics != null)) {
                    columnValuesArray[3] = parentTopicsRowByFK_Slides_Topics[0];
                }
                rowSlidesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSlidesRow);
                return rowSlidesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SlidesRow FindBySlideID(System.Guid SlideID) {
                return ((SlidesRow)(this.Rows.Find(new object[] {
                            SlideID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SlidesDataTable cln = ((SlidesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SlidesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSlideID = base.Columns["SlideID"];
                this.columnSlideName = base.Columns["SlideName"];
                this.columnLectureID = base.Columns["LectureID"];
                this.columnTopicID = base.Columns["TopicID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSlideID = new global::System.Data.DataColumn("SlideID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSlideID);
                this.columnSlideName = new global::System.Data.DataColumn("SlideName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSlideName);
                this.columnLectureID = new global::System.Data.DataColumn("LectureID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLectureID);
                this.columnTopicID = new global::System.Data.DataColumn("TopicID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTopicID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSlideID}, true));
                this.columnSlideID.AllowDBNull = false;
                this.columnSlideID.Unique = true;
                this.columnSlideName.AllowDBNull = false;
                this.columnSlideName.MaxLength = 50;
                this.columnLectureID.AllowDBNull = false;
                this.columnTopicID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SlidesRow NewSlidesRow() {
                return ((SlidesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SlidesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SlidesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SlidesRowChanged != null)) {
                    this.SlidesRowChanged(this, new SlidesRowChangeEvent(((SlidesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SlidesRowChanging != null)) {
                    this.SlidesRowChanging(this, new SlidesRowChangeEvent(((SlidesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SlidesRowDeleted != null)) {
                    this.SlidesRowDeleted(this, new SlidesRowChangeEvent(((SlidesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SlidesRowDeleting != null)) {
                    this.SlidesRowDeleting(this, new SlidesRowChangeEvent(((SlidesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSlidesRow(SlidesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EZTutorDataSet ds = new EZTutorDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SlidesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EZ_instructorsRow : global::System.Data.DataRow {
            
            private EZ_instructorsDataTable tableEZ_instructors;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EZ_instructorsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEZ_instructors = ((EZ_instructorsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string inst_code {
                get {
                    return ((string)(this[this.tableEZ_instructors.inst_codeColumn]));
                }
                set {
                    this[this.tableEZ_instructors.inst_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string inst_name {
                get {
                    return ((string)(this[this.tableEZ_instructors.inst_nameColumn]));
                }
                set {
                    this[this.tableEZ_instructors.inst_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string active {
                get {
                    return ((string)(this[this.tableEZ_instructors.activeColumn]));
                }
                set {
                    this[this.tableEZ_instructors.activeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string univ_code {
                get {
                    return ((string)(this[this.tableEZ_instructors.univ_codeColumn]));
                }
                set {
                    this[this.tableEZ_instructors.univ_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string college_code {
                get {
                    return ((string)(this[this.tableEZ_instructors.college_codeColumn]));
                }
                set {
                    this[this.tableEZ_instructors.college_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EZ_univsRow EZ_univsRowParent {
                get {
                    return ((EZ_univsRow)(this.GetParentRow(this.Table.ParentRelations["FK_ez_inst"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ez_inst"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_topic_lecturesRow[] GetEz_topic_lecturesRows() {
                if ((this.Table.ChildRelations["FK_ez_lec_inst"] == null)) {
                    return new Ez_topic_lecturesRow[0];
                }
                else {
                    return ((Ez_topic_lecturesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ez_lec_inst"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TopicsRow : global::System.Data.DataRow {
            
            private TopicsDataTable tableTopics;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TopicsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTopics = ((TopicsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid TopicID {
                get {
                    return ((global::System.Guid)(this[this.tableTopics.TopicIDColumn]));
                }
                set {
                    this[this.tableTopics.TopicIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TopicName {
                get {
                    return ((string)(this[this.tableTopics.TopicNameColumn]));
                }
                set {
                    this[this.tableTopics.TopicNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SlidesRow[] GetSlidesRows() {
                if ((this.Table.ChildRelations["FK_Slides_Topics"] == null)) {
                    return new SlidesRow[0];
                }
                else {
                    return ((SlidesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Slides_Topics"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Ez_student_privsRow : global::System.Data.DataRow {
            
            private Ez_student_privsDataTable tableEz_student_privs;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Ez_student_privsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEz_student_privs = ((Ez_student_privsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string student_code {
                get {
                    return ((string)(this[this.tableEz_student_privs.student_codeColumn]));
                }
                set {
                    this[this.tableEz_student_privs.student_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string student_priv {
                get {
                    return ((string)(this[this.tableEz_student_privs.student_privColumn]));
                }
                set {
                    this[this.tableEz_student_privs.student_privColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string inst_code {
                get {
                    return ((string)(this[this.tableEz_student_privs.inst_codeColumn]));
                }
                set {
                    this[this.tableEz_student_privs.inst_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string univ_code {
                get {
                    return ((string)(this[this.tableEz_student_privs.univ_codeColumn]));
                }
                set {
                    this[this.tableEz_student_privs.univ_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string college_code {
                get {
                    return ((string)(this[this.tableEz_student_privs.college_codeColumn]));
                }
                set {
                    this[this.tableEz_student_privs.college_codeColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Ez_studentsRow : global::System.Data.DataRow {
            
            private Ez_studentsDataTable tableEz_students;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Ez_studentsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEz_students = ((Ez_studentsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string student_code {
                get {
                    return ((string)(this[this.tableEz_students.student_codeColumn]));
                }
                set {
                    this[this.tableEz_students.student_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string student_name {
                get {
                    return ((string)(this[this.tableEz_students.student_nameColumn]));
                }
                set {
                    this[this.tableEz_students.student_nameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Ez_topic_contentsRow : global::System.Data.DataRow {
            
            private Ez_topic_contentsDataTable tableEz_topic_contents;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Ez_topic_contentsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEz_topic_contents = ((Ez_topic_contentsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string topic_code {
                get {
                    return ((string)(this[this.tableEz_topic_contents.topic_codeColumn]));
                }
                set {
                    this[this.tableEz_topic_contents.topic_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string topic_content_code {
                get {
                    return ((string)(this[this.tableEz_topic_contents.topic_content_codeColumn]));
                }
                set {
                    this[this.tableEz_topic_contents.topic_content_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string content_title {
                get {
                    return ((string)(this[this.tableEz_topic_contents.content_titleColumn]));
                }
                set {
                    this[this.tableEz_topic_contents.content_titleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string univ_code {
                get {
                    return ((string)(this[this.tableEz_topic_contents.univ_codeColumn]));
                }
                set {
                    this[this.tableEz_topic_contents.univ_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string college_code {
                get {
                    return ((string)(this[this.tableEz_topic_contents.college_codeColumn]));
                }
                set {
                    this[this.tableEz_topic_contents.college_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_topic_lecturesRow[] GetEz_topic_lecturesRows() {
                if ((this.Table.ChildRelations["FK_ez_lec"] == null)) {
                    return new Ez_topic_lecturesRow[0];
                }
                else {
                    return ((Ez_topic_lecturesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ez_lec"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Ez_topic_lecturesRow : global::System.Data.DataRow {
            
            private Ez_topic_lecturesDataTable tableEz_topic_lectures;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Ez_topic_lecturesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEz_topic_lectures = ((Ez_topic_lecturesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string topic_code {
                get {
                    return ((string)(this[this.tableEz_topic_lectures.topic_codeColumn]));
                }
                set {
                    this[this.tableEz_topic_lectures.topic_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string topic_content_code {
                get {
                    return ((string)(this[this.tableEz_topic_lectures.topic_content_codeColumn]));
                }
                set {
                    this[this.tableEz_topic_lectures.topic_content_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lec_code {
                get {
                    return ((string)(this[this.tableEz_topic_lectures.lec_codeColumn]));
                }
                set {
                    this[this.tableEz_topic_lectures.lec_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lec_title {
                get {
                    return ((string)(this[this.tableEz_topic_lectures.lec_titleColumn]));
                }
                set {
                    this[this.tableEz_topic_lectures.lec_titleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lec_subj1 {
                get {
                    try {
                        return ((string)(this[this.tableEz_topic_lectures.lec_subj1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'lec_subj1\' in table \'Ez_topic_lectures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEz_topic_lectures.lec_subj1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lec_subj2 {
                get {
                    try {
                        return ((string)(this[this.tableEz_topic_lectures.lec_subj2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'lec_subj2\' in table \'Ez_topic_lectures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEz_topic_lectures.lec_subj2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string univ_code {
                get {
                    return ((string)(this[this.tableEz_topic_lectures.univ_codeColumn]));
                }
                set {
                    this[this.tableEz_topic_lectures.univ_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string college_code {
                get {
                    return ((string)(this[this.tableEz_topic_lectures.college_codeColumn]));
                }
                set {
                    this[this.tableEz_topic_lectures.college_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string inst_code {
                get {
                    return ((string)(this[this.tableEz_topic_lectures.inst_codeColumn]));
                }
                set {
                    this[this.tableEz_topic_lectures.inst_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string univ_code_inst {
                get {
                    return ((string)(this[this.tableEz_topic_lectures.univ_code_instColumn]));
                }
                set {
                    this[this.tableEz_topic_lectures.univ_code_instColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string college_code_inst {
                get {
                    return ((string)(this[this.tableEz_topic_lectures.college_code_instColumn]));
                }
                set {
                    this[this.tableEz_topic_lectures.college_code_instColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_topic_contentsRow Ez_topic_contentsRowParent {
                get {
                    return ((Ez_topic_contentsRow)(this.GetParentRow(this.Table.ParentRelations["FK_ez_lec"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ez_lec"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EZ_instructorsRow EZ_instructorsRowParent {
                get {
                    return ((EZ_instructorsRow)(this.GetParentRow(this.Table.ParentRelations["FK_ez_lec_inst"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ez_lec_inst"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islec_subj1Null() {
                return this.IsNull(this.tableEz_topic_lectures.lec_subj1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlec_subj1Null() {
                this[this.tableEz_topic_lectures.lec_subj1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islec_subj2Null() {
                return this.IsNull(this.tableEz_topic_lectures.lec_subj2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlec_subj2Null() {
                this[this.tableEz_topic_lectures.lec_subj2Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Ez_topicsRow : global::System.Data.DataRow {
            
            private Ez_topicsDataTable tableEz_topics;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Ez_topicsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEz_topics = ((Ez_topicsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string topic_code {
                get {
                    return ((string)(this[this.tableEz_topics.topic_codeColumn]));
                }
                set {
                    this[this.tableEz_topics.topic_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string topic_title {
                get {
                    return ((string)(this[this.tableEz_topics.topic_titleColumn]));
                }
                set {
                    this[this.tableEz_topics.topic_titleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string univ_code {
                get {
                    return ((string)(this[this.tableEz_topics.univ_codeColumn]));
                }
                set {
                    this[this.tableEz_topics.univ_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string college_code {
                get {
                    return ((string)(this[this.tableEz_topics.college_codeColumn]));
                }
                set {
                    this[this.tableEz_topics.college_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EZ_univsRow EZ_univsRowParent {
                get {
                    return ((EZ_univsRow)(this.GetParentRow(this.Table.ParentRelations["FK_ez_topics"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ez_topics"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EZ_univsRow : global::System.Data.DataRow {
            
            private EZ_univsDataTable tableEZ_univs;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EZ_univsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEZ_univs = ((EZ_univsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string univ_code {
                get {
                    return ((string)(this[this.tableEZ_univs.univ_codeColumn]));
                }
                set {
                    this[this.tableEZ_univs.univ_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string univ_name {
                get {
                    return ((string)(this[this.tableEZ_univs.univ_nameColumn]));
                }
                set {
                    this[this.tableEZ_univs.univ_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string college_code {
                get {
                    return ((string)(this[this.tableEZ_univs.college_codeColumn]));
                }
                set {
                    this[this.tableEZ_univs.college_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string college_name {
                get {
                    return ((string)(this[this.tableEZ_univs.college_nameColumn]));
                }
                set {
                    this[this.tableEZ_univs.college_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string note {
                get {
                    try {
                        return ((string)(this[this.tableEZ_univs.noteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'note\' in table \'EZ_univs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEZ_univs.noteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnoteNull() {
                return this.IsNull(this.tableEZ_univs.noteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnoteNull() {
                this[this.tableEZ_univs.noteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EZ_instructorsRow[] GetEZ_instructorsRows() {
                if ((this.Table.ChildRelations["FK_ez_inst"] == null)) {
                    return new EZ_instructorsRow[0];
                }
                else {
                    return ((EZ_instructorsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ez_inst"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_topicsRow[] GetEz_topicsRows() {
                if ((this.Table.ChildRelations["FK_ez_topics"] == null)) {
                    return new Ez_topicsRow[0];
                }
                else {
                    return ((Ez_topicsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ez_topics"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LecturesRow : global::System.Data.DataRow {
            
            private LecturesDataTable tableLectures;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LecturesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLectures = ((LecturesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid LectureID {
                get {
                    return ((global::System.Guid)(this[this.tableLectures.LectureIDColumn]));
                }
                set {
                    this[this.tableLectures.LectureIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LectureName {
                get {
                    return ((string)(this[this.tableLectures.LectureNameColumn]));
                }
                set {
                    this[this.tableLectures.LectureNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LectureWeek {
                get {
                    return ((int)(this[this.tableLectures.LectureWeekColumn]));
                }
                set {
                    this[this.tableLectures.LectureWeekColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SlidesRow[] GetSlidesRows() {
                if ((this.Table.ChildRelations["FK_Slides_Lectures"] == null)) {
                    return new SlidesRow[0];
                }
                else {
                    return ((SlidesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Slides_Lectures"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SlidesRow : global::System.Data.DataRow {
            
            private SlidesDataTable tableSlides;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SlidesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSlides = ((SlidesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid SlideID {
                get {
                    return ((global::System.Guid)(this[this.tableSlides.SlideIDColumn]));
                }
                set {
                    this[this.tableSlides.SlideIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SlideName {
                get {
                    return ((string)(this[this.tableSlides.SlideNameColumn]));
                }
                set {
                    this[this.tableSlides.SlideNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid LectureID {
                get {
                    return ((global::System.Guid)(this[this.tableSlides.LectureIDColumn]));
                }
                set {
                    this[this.tableSlides.LectureIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid TopicID {
                get {
                    return ((global::System.Guid)(this[this.tableSlides.TopicIDColumn]));
                }
                set {
                    this[this.tableSlides.TopicIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LecturesRow LecturesRow {
                get {
                    return ((LecturesRow)(this.GetParentRow(this.Table.ParentRelations["FK_Slides_Lectures"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Slides_Lectures"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TopicsRow TopicsRow {
                get {
                    return ((TopicsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Slides_Topics"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Slides_Topics"]);
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EZ_instructorsRowChangeEvent : global::System.EventArgs {
            
            private EZ_instructorsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EZ_instructorsRowChangeEvent(EZ_instructorsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EZ_instructorsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TopicsRowChangeEvent : global::System.EventArgs {
            
            private TopicsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TopicsRowChangeEvent(TopicsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TopicsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Ez_student_privsRowChangeEvent : global::System.EventArgs {
            
            private Ez_student_privsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_student_privsRowChangeEvent(Ez_student_privsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_student_privsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Ez_studentsRowChangeEvent : global::System.EventArgs {
            
            private Ez_studentsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_studentsRowChangeEvent(Ez_studentsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_studentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Ez_topic_contentsRowChangeEvent : global::System.EventArgs {
            
            private Ez_topic_contentsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_topic_contentsRowChangeEvent(Ez_topic_contentsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_topic_contentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Ez_topic_lecturesRowChangeEvent : global::System.EventArgs {
            
            private Ez_topic_lecturesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_topic_lecturesRowChangeEvent(Ez_topic_lecturesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_topic_lecturesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Ez_topicsRowChangeEvent : global::System.EventArgs {
            
            private Ez_topicsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_topicsRowChangeEvent(Ez_topicsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Ez_topicsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EZ_univsRowChangeEvent : global::System.EventArgs {
            
            private EZ_univsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EZ_univsRowChangeEvent(EZ_univsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EZ_univsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LecturesRowChangeEvent : global::System.EventArgs {
            
            private LecturesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LecturesRowChangeEvent(LecturesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LecturesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SlidesRowChangeEvent : global::System.EventArgs {
            
            private SlidesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SlidesRowChangeEvent(SlidesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SlidesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace EZTutor.Data.Remote.Datasets.EZTutorDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EZ_instructorsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EZ_instructorsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "EZ_instructors";
            tableMapping.ColumnMappings.Add("inst_code", "inst_code");
            tableMapping.ColumnMappings.Add("inst_name", "inst_name");
            tableMapping.ColumnMappings.Add("active", "active");
            tableMapping.ColumnMappings.Add("univ_code", "univ_code");
            tableMapping.ColumnMappings.Add("college_code", "college_code");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[EZ_instructors] WHERE (([inst_code] = @Original_inst_code) AND" +
                " ([inst_name] = @Original_inst_name) AND ([active] = @Original_active) AND ([uni" +
                "v_code] = @Original_univ_code) AND ([college_code] = @Original_college_code))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_inst_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inst_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_inst_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inst_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_active", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "active", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_univ_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_college_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[EZ_instructors] ([inst_code], [inst_name], [active], [univ_code], [college_code]) VALUES (@inst_code, @inst_name, @active, @univ_code, @college_code);
SELECT inst_code, inst_name, active, univ_code, college_code FROM EZ_instructors WHERE (college_code = @college_code) AND (inst_code = @inst_code) AND (univ_code = @univ_code)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inst_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inst_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inst_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inst_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@active", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "active", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@univ_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@college_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[EZ_instructors] SET [inst_code] = @inst_code, [inst_name] = @inst_name, [active] = @active, [univ_code] = @univ_code, [college_code] = @college_code WHERE (([inst_code] = @Original_inst_code) AND ([inst_name] = @Original_inst_name) AND ([active] = @Original_active) AND ([univ_code] = @Original_univ_code) AND ([college_code] = @Original_college_code));
SELECT inst_code, inst_name, active, univ_code, college_code FROM EZ_instructors WHERE (college_code = @college_code) AND (inst_code = @inst_code) AND (univ_code = @univ_code)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inst_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inst_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inst_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inst_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@active", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "active", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@univ_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@college_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_inst_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inst_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_inst_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inst_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_active", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "active", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_univ_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_college_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::EZTutor.Data.Remote.Properties.Settings.Default.eztutorConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT inst_code, inst_name, active, univ_code, college_code FROM dbo.EZ_instruct" +
                "ors";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(EZTutorDataSet.EZ_instructorsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual EZTutorDataSet.EZ_instructorsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            EZTutorDataSet.EZ_instructorsDataTable dataTable = new EZTutorDataSet.EZ_instructorsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(EZTutorDataSet.EZ_instructorsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(EZTutorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "EZ_instructors");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_inst_code, string Original_inst_name, string Original_active, string Original_univ_code, string Original_college_code) {
            if ((Original_inst_code == null)) {
                throw new global::System.ArgumentNullException("Original_inst_code");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_inst_code));
            }
            if ((Original_inst_name == null)) {
                throw new global::System.ArgumentNullException("Original_inst_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_inst_name));
            }
            if ((Original_active == null)) {
                throw new global::System.ArgumentNullException("Original_active");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_active));
            }
            if ((Original_univ_code == null)) {
                throw new global::System.ArgumentNullException("Original_univ_code");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_univ_code));
            }
            if ((Original_college_code == null)) {
                throw new global::System.ArgumentNullException("Original_college_code");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_college_code));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string inst_code, string inst_name, string active, string univ_code, string college_code) {
            if ((inst_code == null)) {
                throw new global::System.ArgumentNullException("inst_code");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(inst_code));
            }
            if ((inst_name == null)) {
                throw new global::System.ArgumentNullException("inst_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(inst_name));
            }
            if ((active == null)) {
                throw new global::System.ArgumentNullException("active");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(active));
            }
            if ((univ_code == null)) {
                throw new global::System.ArgumentNullException("univ_code");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(univ_code));
            }
            if ((college_code == null)) {
                throw new global::System.ArgumentNullException("college_code");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(college_code));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string inst_code, string inst_name, string active, string univ_code, string college_code, string Original_inst_code, string Original_inst_name, string Original_active, string Original_univ_code, string Original_college_code) {
            if ((inst_code == null)) {
                throw new global::System.ArgumentNullException("inst_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(inst_code));
            }
            if ((inst_name == null)) {
                throw new global::System.ArgumentNullException("inst_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(inst_name));
            }
            if ((active == null)) {
                throw new global::System.ArgumentNullException("active");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(active));
            }
            if ((univ_code == null)) {
                throw new global::System.ArgumentNullException("univ_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(univ_code));
            }
            if ((college_code == null)) {
                throw new global::System.ArgumentNullException("college_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(college_code));
            }
            if ((Original_inst_code == null)) {
                throw new global::System.ArgumentNullException("Original_inst_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_inst_code));
            }
            if ((Original_inst_name == null)) {
                throw new global::System.ArgumentNullException("Original_inst_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_inst_name));
            }
            if ((Original_active == null)) {
                throw new global::System.ArgumentNullException("Original_active");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_active));
            }
            if ((Original_univ_code == null)) {
                throw new global::System.ArgumentNullException("Original_univ_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_univ_code));
            }
            if ((Original_college_code == null)) {
                throw new global::System.ArgumentNullException("Original_college_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_college_code));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string inst_name, string active, string Original_inst_code, string Original_inst_name, string Original_active, string Original_univ_code, string Original_college_code) {
            return this.Update(Original_inst_code, inst_name, active, Original_univ_code, Original_college_code, Original_inst_code, Original_inst_name, Original_active, Original_univ_code, Original_college_code);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TopicsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TopicsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Topics";
            tableMapping.ColumnMappings.Add("TopicID", "TopicID");
            tableMapping.ColumnMappings.Add("TopicName", "TopicName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Topics] WHERE (([TopicID] = @Original_TopicID) AND ([TopicName" +
                "] = @Original_TopicName))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TopicID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TopicID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TopicName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TopicName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Topics] ([TopicID], [TopicName]) VALUES (@TopicID, @TopicName)" +
                ";\r\nSELECT TopicID, TopicName FROM Topics WHERE (TopicID = @TopicID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TopicID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TopicID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TopicName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TopicName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Topics] SET [TopicID] = @TopicID, [TopicName] = @TopicName WHERE ((" +
                "[TopicID] = @Original_TopicID) AND ([TopicName] = @Original_TopicName));\r\nSELECT" +
                " TopicID, TopicName FROM Topics WHERE (TopicID = @TopicID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TopicID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TopicID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TopicName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TopicName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TopicID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TopicID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TopicName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TopicName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::EZTutor.Data.Remote.Properties.Settings.Default.eztutorConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TopicID, TopicName FROM dbo.Topics";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(EZTutorDataSet.TopicsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual EZTutorDataSet.TopicsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            EZTutorDataSet.TopicsDataTable dataTable = new EZTutorDataSet.TopicsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(EZTutorDataSet.TopicsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(EZTutorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Topics");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_TopicID, string Original_TopicName) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_TopicID));
            if ((Original_TopicName == null)) {
                throw new global::System.ArgumentNullException("Original_TopicName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TopicName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid TopicID, string TopicName) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(TopicID));
            if ((TopicName == null)) {
                throw new global::System.ArgumentNullException("TopicName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TopicName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Guid TopicID, string TopicName, System.Guid Original_TopicID, string Original_TopicName) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(TopicID));
            if ((TopicName == null)) {
                throw new global::System.ArgumentNullException("TopicName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TopicName));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.Guid)(Original_TopicID));
            if ((Original_TopicName == null)) {
                throw new global::System.ArgumentNullException("Original_TopicName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_TopicName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TopicName, System.Guid Original_TopicID, string Original_TopicName) {
            return this.Update(Original_TopicID, TopicName, Original_TopicID, Original_TopicName);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Ez_student_privsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Ez_student_privsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Ez_student_privs";
            tableMapping.ColumnMappings.Add("student_code", "student_code");
            tableMapping.ColumnMappings.Add("student_priv", "student_priv");
            tableMapping.ColumnMappings.Add("inst_code", "inst_code");
            tableMapping.ColumnMappings.Add("univ_code", "univ_code");
            tableMapping.ColumnMappings.Add("college_code", "college_code");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Ez_student_privs] WHERE (([student_code] = @Original_student_code) AND ([student_priv] = @Original_student_priv) AND ([inst_code] = @Original_inst_code) AND ([univ_code] = @Original_univ_code) AND ([college_code] = @Original_college_code))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_student_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "student_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_student_priv", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "student_priv", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_inst_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inst_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_univ_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_college_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Ez_student_privs] ([student_code], [student_priv], [inst_code], [univ_code], [college_code]) VALUES (@student_code, @student_priv, @inst_code, @univ_code, @college_code);
SELECT student_code, student_priv, inst_code, univ_code, college_code FROM Ez_student_privs WHERE (college_code = @college_code) AND (inst_code = @inst_code) AND (student_code = @student_code) AND (univ_code = @univ_code)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@student_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "student_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@student_priv", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "student_priv", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inst_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inst_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@univ_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@college_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Ez_student_privs] SET [student_code] = @student_code, [student_priv] = @student_priv, [inst_code] = @inst_code, [univ_code] = @univ_code, [college_code] = @college_code WHERE (([student_code] = @Original_student_code) AND ([student_priv] = @Original_student_priv) AND ([inst_code] = @Original_inst_code) AND ([univ_code] = @Original_univ_code) AND ([college_code] = @Original_college_code));
SELECT student_code, student_priv, inst_code, univ_code, college_code FROM Ez_student_privs WHERE (college_code = @college_code) AND (inst_code = @inst_code) AND (student_code = @student_code) AND (univ_code = @univ_code)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@student_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "student_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@student_priv", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "student_priv", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inst_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inst_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@univ_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@college_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_student_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "student_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_student_priv", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "student_priv", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_inst_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inst_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_univ_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_college_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::EZTutor.Data.Remote.Properties.Settings.Default.eztutorConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT student_code, student_priv, inst_code, univ_code, college_code FROM dbo.Ez" +
                "_student_privs";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(EZTutorDataSet.Ez_student_privsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual EZTutorDataSet.Ez_student_privsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            EZTutorDataSet.Ez_student_privsDataTable dataTable = new EZTutorDataSet.Ez_student_privsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(EZTutorDataSet.Ez_student_privsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(EZTutorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Ez_student_privs");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_student_code, string Original_student_priv, string Original_inst_code, string Original_univ_code, string Original_college_code) {
            if ((Original_student_code == null)) {
                throw new global::System.ArgumentNullException("Original_student_code");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_student_code));
            }
            if ((Original_student_priv == null)) {
                throw new global::System.ArgumentNullException("Original_student_priv");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_student_priv));
            }
            if ((Original_inst_code == null)) {
                throw new global::System.ArgumentNullException("Original_inst_code");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_inst_code));
            }
            if ((Original_univ_code == null)) {
                throw new global::System.ArgumentNullException("Original_univ_code");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_univ_code));
            }
            if ((Original_college_code == null)) {
                throw new global::System.ArgumentNullException("Original_college_code");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_college_code));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string student_code, string student_priv, string inst_code, string univ_code, string college_code) {
            if ((student_code == null)) {
                throw new global::System.ArgumentNullException("student_code");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(student_code));
            }
            if ((student_priv == null)) {
                throw new global::System.ArgumentNullException("student_priv");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(student_priv));
            }
            if ((inst_code == null)) {
                throw new global::System.ArgumentNullException("inst_code");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(inst_code));
            }
            if ((univ_code == null)) {
                throw new global::System.ArgumentNullException("univ_code");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(univ_code));
            }
            if ((college_code == null)) {
                throw new global::System.ArgumentNullException("college_code");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(college_code));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string student_code, string student_priv, string inst_code, string univ_code, string college_code, string Original_student_code, string Original_student_priv, string Original_inst_code, string Original_univ_code, string Original_college_code) {
            if ((student_code == null)) {
                throw new global::System.ArgumentNullException("student_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(student_code));
            }
            if ((student_priv == null)) {
                throw new global::System.ArgumentNullException("student_priv");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(student_priv));
            }
            if ((inst_code == null)) {
                throw new global::System.ArgumentNullException("inst_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(inst_code));
            }
            if ((univ_code == null)) {
                throw new global::System.ArgumentNullException("univ_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(univ_code));
            }
            if ((college_code == null)) {
                throw new global::System.ArgumentNullException("college_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(college_code));
            }
            if ((Original_student_code == null)) {
                throw new global::System.ArgumentNullException("Original_student_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_student_code));
            }
            if ((Original_student_priv == null)) {
                throw new global::System.ArgumentNullException("Original_student_priv");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_student_priv));
            }
            if ((Original_inst_code == null)) {
                throw new global::System.ArgumentNullException("Original_inst_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_inst_code));
            }
            if ((Original_univ_code == null)) {
                throw new global::System.ArgumentNullException("Original_univ_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_univ_code));
            }
            if ((Original_college_code == null)) {
                throw new global::System.ArgumentNullException("Original_college_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_college_code));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string student_priv, string Original_student_code, string Original_student_priv, string Original_inst_code, string Original_univ_code, string Original_college_code) {
            return this.Update(Original_student_code, student_priv, Original_inst_code, Original_univ_code, Original_college_code, Original_student_code, Original_student_priv, Original_inst_code, Original_univ_code, Original_college_code);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Ez_studentsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Ez_studentsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Ez_students";
            tableMapping.ColumnMappings.Add("student_code", "student_code");
            tableMapping.ColumnMappings.Add("student_name", "student_name");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Ez_students] WHERE (([student_code] = @Original_student_code) " +
                "AND ([student_name] = @Original_student_name))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_student_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "student_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_student_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "student_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Ez_students] ([student_code], [student_name]) VALUES (@student" +
                "_code, @student_name);\r\nSELECT student_code, student_name FROM Ez_students WHERE" +
                " (student_code = @student_code)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@student_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "student_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@student_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "student_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Ez_students] SET [student_code] = @student_code, [student_name] = @student_name WHERE (([student_code] = @Original_student_code) AND ([student_name] = @Original_student_name));
SELECT student_code, student_name FROM Ez_students WHERE (student_code = @student_code)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@student_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "student_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@student_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "student_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_student_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "student_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_student_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "student_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::EZTutor.Data.Remote.Properties.Settings.Default.eztutorConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT student_code, student_name FROM dbo.Ez_students";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(EZTutorDataSet.Ez_studentsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual EZTutorDataSet.Ez_studentsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            EZTutorDataSet.Ez_studentsDataTable dataTable = new EZTutorDataSet.Ez_studentsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(EZTutorDataSet.Ez_studentsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(EZTutorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Ez_students");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_student_code, string Original_student_name) {
            if ((Original_student_code == null)) {
                throw new global::System.ArgumentNullException("Original_student_code");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_student_code));
            }
            if ((Original_student_name == null)) {
                throw new global::System.ArgumentNullException("Original_student_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_student_name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string student_code, string student_name) {
            if ((student_code == null)) {
                throw new global::System.ArgumentNullException("student_code");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(student_code));
            }
            if ((student_name == null)) {
                throw new global::System.ArgumentNullException("student_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(student_name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string student_code, string student_name, string Original_student_code, string Original_student_name) {
            if ((student_code == null)) {
                throw new global::System.ArgumentNullException("student_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(student_code));
            }
            if ((student_name == null)) {
                throw new global::System.ArgumentNullException("student_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(student_name));
            }
            if ((Original_student_code == null)) {
                throw new global::System.ArgumentNullException("Original_student_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_student_code));
            }
            if ((Original_student_name == null)) {
                throw new global::System.ArgumentNullException("Original_student_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_student_name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string student_name, string Original_student_code, string Original_student_name) {
            return this.Update(Original_student_code, student_name, Original_student_code, Original_student_name);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Ez_topic_contentsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Ez_topic_contentsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Ez_topic_contents";
            tableMapping.ColumnMappings.Add("topic_code", "topic_code");
            tableMapping.ColumnMappings.Add("topic_content_code", "topic_content_code");
            tableMapping.ColumnMappings.Add("content_title", "content_title");
            tableMapping.ColumnMappings.Add("univ_code", "univ_code");
            tableMapping.ColumnMappings.Add("college_code", "college_code");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Ez_topic_contents] WHERE (([topic_code] = @Original_topic_code) AND ([topic_content_code] = @Original_topic_content_code) AND ([content_title] = @Original_content_title) AND ([univ_code] = @Original_univ_code) AND ([college_code] = @Original_college_code))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_topic_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "topic_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_topic_content_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "topic_content_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_content_title", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "content_title", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_univ_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_college_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Ez_topic_contents] ([topic_code], [topic_content_code], [content_title], [univ_code], [college_code]) VALUES (@topic_code, @topic_content_code, @content_title, @univ_code, @college_code);
SELECT topic_code, topic_content_code, content_title, univ_code, college_code FROM Ez_topic_contents WHERE (college_code = @college_code) AND (topic_code = @topic_code) AND (topic_content_code = @topic_content_code) AND (univ_code = @univ_code)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@topic_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "topic_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@topic_content_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "topic_content_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@content_title", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "content_title", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@univ_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@college_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Ez_topic_contents] SET [topic_code] = @topic_code, [topic_content_code] = @topic_content_code, [content_title] = @content_title, [univ_code] = @univ_code, [college_code] = @college_code WHERE (([topic_code] = @Original_topic_code) AND ([topic_content_code] = @Original_topic_content_code) AND ([content_title] = @Original_content_title) AND ([univ_code] = @Original_univ_code) AND ([college_code] = @Original_college_code));
SELECT topic_code, topic_content_code, content_title, univ_code, college_code FROM Ez_topic_contents WHERE (college_code = @college_code) AND (topic_code = @topic_code) AND (topic_content_code = @topic_content_code) AND (univ_code = @univ_code)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@topic_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "topic_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@topic_content_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "topic_content_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@content_title", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "content_title", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@univ_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@college_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_topic_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "topic_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_topic_content_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "topic_content_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_content_title", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "content_title", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_univ_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_college_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::EZTutor.Data.Remote.Properties.Settings.Default.eztutorConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT topic_code, topic_content_code, content_title, univ_code, college_code FRO" +
                "M dbo.Ez_topic_contents";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(EZTutorDataSet.Ez_topic_contentsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual EZTutorDataSet.Ez_topic_contentsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            EZTutorDataSet.Ez_topic_contentsDataTable dataTable = new EZTutorDataSet.Ez_topic_contentsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(EZTutorDataSet.Ez_topic_contentsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(EZTutorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Ez_topic_contents");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_topic_code, string Original_topic_content_code, string Original_content_title, string Original_univ_code, string Original_college_code) {
            if ((Original_topic_code == null)) {
                throw new global::System.ArgumentNullException("Original_topic_code");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_topic_code));
            }
            if ((Original_topic_content_code == null)) {
                throw new global::System.ArgumentNullException("Original_topic_content_code");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_topic_content_code));
            }
            if ((Original_content_title == null)) {
                throw new global::System.ArgumentNullException("Original_content_title");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_content_title));
            }
            if ((Original_univ_code == null)) {
                throw new global::System.ArgumentNullException("Original_univ_code");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_univ_code));
            }
            if ((Original_college_code == null)) {
                throw new global::System.ArgumentNullException("Original_college_code");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_college_code));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string topic_code, string topic_content_code, string content_title, string univ_code, string college_code) {
            if ((topic_code == null)) {
                throw new global::System.ArgumentNullException("topic_code");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(topic_code));
            }
            if ((topic_content_code == null)) {
                throw new global::System.ArgumentNullException("topic_content_code");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(topic_content_code));
            }
            if ((content_title == null)) {
                throw new global::System.ArgumentNullException("content_title");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(content_title));
            }
            if ((univ_code == null)) {
                throw new global::System.ArgumentNullException("univ_code");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(univ_code));
            }
            if ((college_code == null)) {
                throw new global::System.ArgumentNullException("college_code");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(college_code));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string topic_code, string topic_content_code, string content_title, string univ_code, string college_code, string Original_topic_code, string Original_topic_content_code, string Original_content_title, string Original_univ_code, string Original_college_code) {
            if ((topic_code == null)) {
                throw new global::System.ArgumentNullException("topic_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(topic_code));
            }
            if ((topic_content_code == null)) {
                throw new global::System.ArgumentNullException("topic_content_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(topic_content_code));
            }
            if ((content_title == null)) {
                throw new global::System.ArgumentNullException("content_title");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(content_title));
            }
            if ((univ_code == null)) {
                throw new global::System.ArgumentNullException("univ_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(univ_code));
            }
            if ((college_code == null)) {
                throw new global::System.ArgumentNullException("college_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(college_code));
            }
            if ((Original_topic_code == null)) {
                throw new global::System.ArgumentNullException("Original_topic_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_topic_code));
            }
            if ((Original_topic_content_code == null)) {
                throw new global::System.ArgumentNullException("Original_topic_content_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_topic_content_code));
            }
            if ((Original_content_title == null)) {
                throw new global::System.ArgumentNullException("Original_content_title");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_content_title));
            }
            if ((Original_univ_code == null)) {
                throw new global::System.ArgumentNullException("Original_univ_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_univ_code));
            }
            if ((Original_college_code == null)) {
                throw new global::System.ArgumentNullException("Original_college_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_college_code));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string content_title, string Original_topic_code, string Original_topic_content_code, string Original_content_title, string Original_univ_code, string Original_college_code) {
            return this.Update(Original_topic_code, Original_topic_content_code, content_title, Original_univ_code, Original_college_code, Original_topic_code, Original_topic_content_code, Original_content_title, Original_univ_code, Original_college_code);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Ez_topic_lecturesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Ez_topic_lecturesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Ez_topic_lectures";
            tableMapping.ColumnMappings.Add("topic_code", "topic_code");
            tableMapping.ColumnMappings.Add("topic_content_code", "topic_content_code");
            tableMapping.ColumnMappings.Add("lec_code", "lec_code");
            tableMapping.ColumnMappings.Add("lec_title", "lec_title");
            tableMapping.ColumnMappings.Add("lec_subj1", "lec_subj1");
            tableMapping.ColumnMappings.Add("lec_subj2", "lec_subj2");
            tableMapping.ColumnMappings.Add("univ_code", "univ_code");
            tableMapping.ColumnMappings.Add("college_code", "college_code");
            tableMapping.ColumnMappings.Add("inst_code", "inst_code");
            tableMapping.ColumnMappings.Add("univ_code_inst", "univ_code_inst");
            tableMapping.ColumnMappings.Add("college_code_inst", "college_code_inst");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Ez_topic_lectures] WHERE (([topic_code] = @Original_topic_code) AND ([topic_content_code] = @Original_topic_content_code) AND ([lec_code] = @Original_lec_code) AND ([lec_title] = @Original_lec_title) AND ((@IsNull_lec_subj1 = 1 AND [lec_subj1] IS NULL) OR ([lec_subj1] = @Original_lec_subj1)) AND ((@IsNull_lec_subj2 = 1 AND [lec_subj2] IS NULL) OR ([lec_subj2] = @Original_lec_subj2)) AND ([univ_code] = @Original_univ_code) AND ([college_code] = @Original_college_code) AND ([inst_code] = @Original_inst_code) AND ([univ_code_inst] = @Original_univ_code_inst) AND ([college_code_inst] = @Original_college_code_inst))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_topic_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "topic_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_topic_content_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "topic_content_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_lec_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lec_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_lec_title", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lec_title", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_lec_subj1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lec_subj1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_lec_subj1", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lec_subj1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_lec_subj2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lec_subj2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_lec_subj2", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lec_subj2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_univ_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_college_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_inst_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inst_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_univ_code_inst", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_code_inst", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_college_code_inst", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_code_inst", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Ez_topic_lectures] ([topic_code], [topic_content_code], [lec_code], [lec_title], [lec_subj1], [lec_subj2], [univ_code], [college_code], [inst_code], [univ_code_inst], [college_code_inst]) VALUES (@topic_code, @topic_content_code, @lec_code, @lec_title, @lec_subj1, @lec_subj2, @univ_code, @college_code, @inst_code, @univ_code_inst, @college_code_inst);
SELECT topic_code, topic_content_code, lec_code, lec_title, lec_subj1, lec_subj2, univ_code, college_code, inst_code, univ_code_inst, college_code_inst FROM Ez_topic_lectures WHERE (college_code = @college_code) AND (lec_code = @lec_code) AND (topic_code = @topic_code) AND (topic_content_code = @topic_content_code) AND (univ_code = @univ_code)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@topic_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "topic_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@topic_content_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "topic_content_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@lec_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lec_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@lec_title", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lec_title", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@lec_subj1", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lec_subj1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@lec_subj2", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lec_subj2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@univ_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@college_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inst_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inst_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@univ_code_inst", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_code_inst", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@college_code_inst", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_code_inst", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Ez_topic_lectures] SET [topic_code] = @topic_code, [topic_content_code] = @topic_content_code, [lec_code] = @lec_code, [lec_title] = @lec_title, [lec_subj1] = @lec_subj1, [lec_subj2] = @lec_subj2, [univ_code] = @univ_code, [college_code] = @college_code, [inst_code] = @inst_code, [univ_code_inst] = @univ_code_inst, [college_code_inst] = @college_code_inst WHERE (([topic_code] = @Original_topic_code) AND ([topic_content_code] = @Original_topic_content_code) AND ([lec_code] = @Original_lec_code) AND ([lec_title] = @Original_lec_title) AND ((@IsNull_lec_subj1 = 1 AND [lec_subj1] IS NULL) OR ([lec_subj1] = @Original_lec_subj1)) AND ((@IsNull_lec_subj2 = 1 AND [lec_subj2] IS NULL) OR ([lec_subj2] = @Original_lec_subj2)) AND ([univ_code] = @Original_univ_code) AND ([college_code] = @Original_college_code) AND ([inst_code] = @Original_inst_code) AND ([univ_code_inst] = @Original_univ_code_inst) AND ([college_code_inst] = @Original_college_code_inst));
SELECT topic_code, topic_content_code, lec_code, lec_title, lec_subj1, lec_subj2, univ_code, college_code, inst_code, univ_code_inst, college_code_inst FROM Ez_topic_lectures WHERE (college_code = @college_code) AND (lec_code = @lec_code) AND (topic_code = @topic_code) AND (topic_content_code = @topic_content_code) AND (univ_code = @univ_code)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@topic_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "topic_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@topic_content_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "topic_content_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@lec_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lec_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@lec_title", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lec_title", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@lec_subj1", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lec_subj1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@lec_subj2", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lec_subj2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@univ_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@college_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inst_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inst_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@univ_code_inst", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_code_inst", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@college_code_inst", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_code_inst", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_topic_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "topic_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_topic_content_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "topic_content_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_lec_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lec_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_lec_title", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lec_title", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_lec_subj1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lec_subj1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_lec_subj1", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lec_subj1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_lec_subj2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lec_subj2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_lec_subj2", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lec_subj2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_univ_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_college_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_inst_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inst_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_univ_code_inst", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_code_inst", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_college_code_inst", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_code_inst", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::EZTutor.Data.Remote.Properties.Settings.Default.eztutorConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT topic_code, topic_content_code, lec_code, lec_title, lec_subj1, lec_subj2," +
                " univ_code, college_code, inst_code, univ_code_inst, college_code_inst FROM dbo." +
                "Ez_topic_lectures";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(EZTutorDataSet.Ez_topic_lecturesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual EZTutorDataSet.Ez_topic_lecturesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            EZTutorDataSet.Ez_topic_lecturesDataTable dataTable = new EZTutorDataSet.Ez_topic_lecturesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(EZTutorDataSet.Ez_topic_lecturesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(EZTutorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Ez_topic_lectures");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_topic_code, string Original_topic_content_code, string Original_lec_code, string Original_lec_title, string Original_lec_subj1, string Original_lec_subj2, string Original_univ_code, string Original_college_code, string Original_inst_code, string Original_univ_code_inst, string Original_college_code_inst) {
            if ((Original_topic_code == null)) {
                throw new global::System.ArgumentNullException("Original_topic_code");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_topic_code));
            }
            if ((Original_topic_content_code == null)) {
                throw new global::System.ArgumentNullException("Original_topic_content_code");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_topic_content_code));
            }
            if ((Original_lec_code == null)) {
                throw new global::System.ArgumentNullException("Original_lec_code");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_lec_code));
            }
            if ((Original_lec_title == null)) {
                throw new global::System.ArgumentNullException("Original_lec_title");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_lec_title));
            }
            if ((Original_lec_subj1 == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_lec_subj1));
            }
            if ((Original_lec_subj2 == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_lec_subj2));
            }
            if ((Original_univ_code == null)) {
                throw new global::System.ArgumentNullException("Original_univ_code");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_univ_code));
            }
            if ((Original_college_code == null)) {
                throw new global::System.ArgumentNullException("Original_college_code");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_college_code));
            }
            if ((Original_inst_code == null)) {
                throw new global::System.ArgumentNullException("Original_inst_code");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_inst_code));
            }
            if ((Original_univ_code_inst == null)) {
                throw new global::System.ArgumentNullException("Original_univ_code_inst");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_univ_code_inst));
            }
            if ((Original_college_code_inst == null)) {
                throw new global::System.ArgumentNullException("Original_college_code_inst");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_college_code_inst));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string topic_code, string topic_content_code, string lec_code, string lec_title, string lec_subj1, string lec_subj2, string univ_code, string college_code, string inst_code, string univ_code_inst, string college_code_inst) {
            if ((topic_code == null)) {
                throw new global::System.ArgumentNullException("topic_code");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(topic_code));
            }
            if ((topic_content_code == null)) {
                throw new global::System.ArgumentNullException("topic_content_code");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(topic_content_code));
            }
            if ((lec_code == null)) {
                throw new global::System.ArgumentNullException("lec_code");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(lec_code));
            }
            if ((lec_title == null)) {
                throw new global::System.ArgumentNullException("lec_title");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(lec_title));
            }
            if ((lec_subj1 == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(lec_subj1));
            }
            if ((lec_subj2 == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(lec_subj2));
            }
            if ((univ_code == null)) {
                throw new global::System.ArgumentNullException("univ_code");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(univ_code));
            }
            if ((college_code == null)) {
                throw new global::System.ArgumentNullException("college_code");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(college_code));
            }
            if ((inst_code == null)) {
                throw new global::System.ArgumentNullException("inst_code");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(inst_code));
            }
            if ((univ_code_inst == null)) {
                throw new global::System.ArgumentNullException("univ_code_inst");
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(univ_code_inst));
            }
            if ((college_code_inst == null)) {
                throw new global::System.ArgumentNullException("college_code_inst");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(college_code_inst));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string topic_code, 
                    string topic_content_code, 
                    string lec_code, 
                    string lec_title, 
                    string lec_subj1, 
                    string lec_subj2, 
                    string univ_code, 
                    string college_code, 
                    string inst_code, 
                    string univ_code_inst, 
                    string college_code_inst, 
                    string Original_topic_code, 
                    string Original_topic_content_code, 
                    string Original_lec_code, 
                    string Original_lec_title, 
                    string Original_lec_subj1, 
                    string Original_lec_subj2, 
                    string Original_univ_code, 
                    string Original_college_code, 
                    string Original_inst_code, 
                    string Original_univ_code_inst, 
                    string Original_college_code_inst) {
            if ((topic_code == null)) {
                throw new global::System.ArgumentNullException("topic_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(topic_code));
            }
            if ((topic_content_code == null)) {
                throw new global::System.ArgumentNullException("topic_content_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(topic_content_code));
            }
            if ((lec_code == null)) {
                throw new global::System.ArgumentNullException("lec_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(lec_code));
            }
            if ((lec_title == null)) {
                throw new global::System.ArgumentNullException("lec_title");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(lec_title));
            }
            if ((lec_subj1 == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(lec_subj1));
            }
            if ((lec_subj2 == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(lec_subj2));
            }
            if ((univ_code == null)) {
                throw new global::System.ArgumentNullException("univ_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(univ_code));
            }
            if ((college_code == null)) {
                throw new global::System.ArgumentNullException("college_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(college_code));
            }
            if ((inst_code == null)) {
                throw new global::System.ArgumentNullException("inst_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(inst_code));
            }
            if ((univ_code_inst == null)) {
                throw new global::System.ArgumentNullException("univ_code_inst");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(univ_code_inst));
            }
            if ((college_code_inst == null)) {
                throw new global::System.ArgumentNullException("college_code_inst");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(college_code_inst));
            }
            if ((Original_topic_code == null)) {
                throw new global::System.ArgumentNullException("Original_topic_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_topic_code));
            }
            if ((Original_topic_content_code == null)) {
                throw new global::System.ArgumentNullException("Original_topic_content_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_topic_content_code));
            }
            if ((Original_lec_code == null)) {
                throw new global::System.ArgumentNullException("Original_lec_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_lec_code));
            }
            if ((Original_lec_title == null)) {
                throw new global::System.ArgumentNullException("Original_lec_title");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_lec_title));
            }
            if ((Original_lec_subj1 == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_lec_subj1));
            }
            if ((Original_lec_subj2 == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_lec_subj2));
            }
            if ((Original_univ_code == null)) {
                throw new global::System.ArgumentNullException("Original_univ_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_univ_code));
            }
            if ((Original_college_code == null)) {
                throw new global::System.ArgumentNullException("Original_college_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_college_code));
            }
            if ((Original_inst_code == null)) {
                throw new global::System.ArgumentNullException("Original_inst_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_inst_code));
            }
            if ((Original_univ_code_inst == null)) {
                throw new global::System.ArgumentNullException("Original_univ_code_inst");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_univ_code_inst));
            }
            if ((Original_college_code_inst == null)) {
                throw new global::System.ArgumentNullException("Original_college_code_inst");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_college_code_inst));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string lec_title, 
                    string lec_subj1, 
                    string lec_subj2, 
                    string inst_code, 
                    string univ_code_inst, 
                    string college_code_inst, 
                    string Original_topic_code, 
                    string Original_topic_content_code, 
                    string Original_lec_code, 
                    string Original_lec_title, 
                    string Original_lec_subj1, 
                    string Original_lec_subj2, 
                    string Original_univ_code, 
                    string Original_college_code, 
                    string Original_inst_code, 
                    string Original_univ_code_inst, 
                    string Original_college_code_inst) {
            return this.Update(Original_topic_code, Original_topic_content_code, Original_lec_code, lec_title, lec_subj1, lec_subj2, Original_univ_code, Original_college_code, inst_code, univ_code_inst, college_code_inst, Original_topic_code, Original_topic_content_code, Original_lec_code, Original_lec_title, Original_lec_subj1, Original_lec_subj2, Original_univ_code, Original_college_code, Original_inst_code, Original_univ_code_inst, Original_college_code_inst);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Ez_topicsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Ez_topicsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Ez_topics";
            tableMapping.ColumnMappings.Add("topic_code", "topic_code");
            tableMapping.ColumnMappings.Add("topic_title", "topic_title");
            tableMapping.ColumnMappings.Add("univ_code", "univ_code");
            tableMapping.ColumnMappings.Add("college_code", "college_code");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Ez_topics] WHERE (([topic_code] = @Original_topic_code) AND ([" +
                "topic_title] = @Original_topic_title) AND ([univ_code] = @Original_univ_code) AN" +
                "D ([college_code] = @Original_college_code))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_topic_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "topic_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_topic_title", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "topic_title", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_univ_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_college_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Ez_topics] ([topic_code], [topic_title], [univ_code], [college_code]) VALUES (@topic_code, @topic_title, @univ_code, @college_code);
SELECT topic_code, topic_title, univ_code, college_code FROM Ez_topics WHERE (college_code = @college_code) AND (topic_code = @topic_code) AND (univ_code = @univ_code)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@topic_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "topic_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@topic_title", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "topic_title", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@univ_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@college_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Ez_topics] SET [topic_code] = @topic_code, [topic_title] = @topic_title, [univ_code] = @univ_code, [college_code] = @college_code WHERE (([topic_code] = @Original_topic_code) AND ([topic_title] = @Original_topic_title) AND ([univ_code] = @Original_univ_code) AND ([college_code] = @Original_college_code));
SELECT topic_code, topic_title, univ_code, college_code FROM Ez_topics WHERE (college_code = @college_code) AND (topic_code = @topic_code) AND (univ_code = @univ_code)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@topic_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "topic_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@topic_title", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "topic_title", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@univ_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@college_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_topic_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "topic_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_topic_title", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "topic_title", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_univ_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_college_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::EZTutor.Data.Remote.Properties.Settings.Default.eztutorConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT topic_code, topic_title, univ_code, college_code FROM dbo.Ez_topics";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(EZTutorDataSet.Ez_topicsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual EZTutorDataSet.Ez_topicsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            EZTutorDataSet.Ez_topicsDataTable dataTable = new EZTutorDataSet.Ez_topicsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(EZTutorDataSet.Ez_topicsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(EZTutorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Ez_topics");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_topic_code, string Original_topic_title, string Original_univ_code, string Original_college_code) {
            if ((Original_topic_code == null)) {
                throw new global::System.ArgumentNullException("Original_topic_code");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_topic_code));
            }
            if ((Original_topic_title == null)) {
                throw new global::System.ArgumentNullException("Original_topic_title");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_topic_title));
            }
            if ((Original_univ_code == null)) {
                throw new global::System.ArgumentNullException("Original_univ_code");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_univ_code));
            }
            if ((Original_college_code == null)) {
                throw new global::System.ArgumentNullException("Original_college_code");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_college_code));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string topic_code, string topic_title, string univ_code, string college_code) {
            if ((topic_code == null)) {
                throw new global::System.ArgumentNullException("topic_code");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(topic_code));
            }
            if ((topic_title == null)) {
                throw new global::System.ArgumentNullException("topic_title");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(topic_title));
            }
            if ((univ_code == null)) {
                throw new global::System.ArgumentNullException("univ_code");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(univ_code));
            }
            if ((college_code == null)) {
                throw new global::System.ArgumentNullException("college_code");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(college_code));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string topic_code, string topic_title, string univ_code, string college_code, string Original_topic_code, string Original_topic_title, string Original_univ_code, string Original_college_code) {
            if ((topic_code == null)) {
                throw new global::System.ArgumentNullException("topic_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(topic_code));
            }
            if ((topic_title == null)) {
                throw new global::System.ArgumentNullException("topic_title");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(topic_title));
            }
            if ((univ_code == null)) {
                throw new global::System.ArgumentNullException("univ_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(univ_code));
            }
            if ((college_code == null)) {
                throw new global::System.ArgumentNullException("college_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(college_code));
            }
            if ((Original_topic_code == null)) {
                throw new global::System.ArgumentNullException("Original_topic_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_topic_code));
            }
            if ((Original_topic_title == null)) {
                throw new global::System.ArgumentNullException("Original_topic_title");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_topic_title));
            }
            if ((Original_univ_code == null)) {
                throw new global::System.ArgumentNullException("Original_univ_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_univ_code));
            }
            if ((Original_college_code == null)) {
                throw new global::System.ArgumentNullException("Original_college_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_college_code));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string topic_title, string Original_topic_code, string Original_topic_title, string Original_univ_code, string Original_college_code) {
            return this.Update(Original_topic_code, topic_title, Original_univ_code, Original_college_code, Original_topic_code, Original_topic_title, Original_univ_code, Original_college_code);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EZ_univsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EZ_univsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "EZ_univs";
            tableMapping.ColumnMappings.Add("univ_code", "univ_code");
            tableMapping.ColumnMappings.Add("univ_name", "univ_name");
            tableMapping.ColumnMappings.Add("college_code", "college_code");
            tableMapping.ColumnMappings.Add("college_name", "college_name");
            tableMapping.ColumnMappings.Add("note", "note");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[EZ_univs] WHERE (([univ_code] = @Original_univ_code) AND ([univ_name] = @Original_univ_name) AND ([college_code] = @Original_college_code) AND ([college_name] = @Original_college_name) AND ((@IsNull_note = 1 AND [note] IS NULL) OR ([note] = @Original_note)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_univ_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_univ_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_college_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_college_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_note", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "note", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_note", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "note", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[EZ_univs] ([univ_code], [univ_name], [college_code], [college_name], [note]) VALUES (@univ_code, @univ_name, @college_code, @college_name, @note);
SELECT univ_code, univ_name, college_code, college_name, note FROM EZ_univs WHERE (college_code = @college_code) AND (univ_code = @univ_code)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@univ_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@univ_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@college_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@college_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@note", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "note", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[EZ_univs] SET [univ_code] = @univ_code, [univ_name] = @univ_name, [college_code] = @college_code, [college_name] = @college_name, [note] = @note WHERE (([univ_code] = @Original_univ_code) AND ([univ_name] = @Original_univ_name) AND ([college_code] = @Original_college_code) AND ([college_name] = @Original_college_name) AND ((@IsNull_note = 1 AND [note] IS NULL) OR ([note] = @Original_note)));
SELECT univ_code, univ_name, college_code, college_name, note FROM EZ_univs WHERE (college_code = @college_code) AND (univ_code = @univ_code)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@univ_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@univ_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@college_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@college_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@note", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "note", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_univ_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_univ_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "univ_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_college_code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_college_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "college_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_note", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "note", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_note", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "note", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::EZTutor.Data.Remote.Properties.Settings.Default.eztutorConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT univ_code, univ_name, college_code, college_name, note FROM dbo.EZ_univs";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(EZTutorDataSet.EZ_univsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual EZTutorDataSet.EZ_univsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            EZTutorDataSet.EZ_univsDataTable dataTable = new EZTutorDataSet.EZ_univsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(EZTutorDataSet.EZ_univsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(EZTutorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "EZ_univs");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_univ_code, string Original_univ_name, string Original_college_code, string Original_college_name, string Original_note) {
            if ((Original_univ_code == null)) {
                throw new global::System.ArgumentNullException("Original_univ_code");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_univ_code));
            }
            if ((Original_univ_name == null)) {
                throw new global::System.ArgumentNullException("Original_univ_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_univ_name));
            }
            if ((Original_college_code == null)) {
                throw new global::System.ArgumentNullException("Original_college_code");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_college_code));
            }
            if ((Original_college_name == null)) {
                throw new global::System.ArgumentNullException("Original_college_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_college_name));
            }
            if ((Original_note == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_note));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string univ_code, string univ_name, string college_code, string college_name, string note) {
            if ((univ_code == null)) {
                throw new global::System.ArgumentNullException("univ_code");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(univ_code));
            }
            if ((univ_name == null)) {
                throw new global::System.ArgumentNullException("univ_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(univ_name));
            }
            if ((college_code == null)) {
                throw new global::System.ArgumentNullException("college_code");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(college_code));
            }
            if ((college_name == null)) {
                throw new global::System.ArgumentNullException("college_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(college_name));
            }
            if ((note == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(note));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string univ_code, string univ_name, string college_code, string college_name, string note, string Original_univ_code, string Original_univ_name, string Original_college_code, string Original_college_name, string Original_note) {
            if ((univ_code == null)) {
                throw new global::System.ArgumentNullException("univ_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(univ_code));
            }
            if ((univ_name == null)) {
                throw new global::System.ArgumentNullException("univ_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(univ_name));
            }
            if ((college_code == null)) {
                throw new global::System.ArgumentNullException("college_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(college_code));
            }
            if ((college_name == null)) {
                throw new global::System.ArgumentNullException("college_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(college_name));
            }
            if ((note == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(note));
            }
            if ((Original_univ_code == null)) {
                throw new global::System.ArgumentNullException("Original_univ_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_univ_code));
            }
            if ((Original_univ_name == null)) {
                throw new global::System.ArgumentNullException("Original_univ_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_univ_name));
            }
            if ((Original_college_code == null)) {
                throw new global::System.ArgumentNullException("Original_college_code");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_college_code));
            }
            if ((Original_college_name == null)) {
                throw new global::System.ArgumentNullException("Original_college_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_college_name));
            }
            if ((Original_note == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_note));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string univ_name, string college_name, string note, string Original_univ_code, string Original_univ_name, string Original_college_code, string Original_college_name, string Original_note) {
            return this.Update(Original_univ_code, univ_name, Original_college_code, college_name, note, Original_univ_code, Original_univ_name, Original_college_code, Original_college_name, Original_note);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LecturesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LecturesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Lectures";
            tableMapping.ColumnMappings.Add("LectureID", "LectureID");
            tableMapping.ColumnMappings.Add("LectureName", "LectureName");
            tableMapping.ColumnMappings.Add("LectureWeek", "LectureWeek");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Lectures] WHERE (([LectureID] = @Original_LectureID) AND ([Lec" +
                "tureName] = @Original_LectureName) AND ([LectureWeek] = @Original_LectureWeek))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LectureID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LectureID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LectureName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LectureName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LectureWeek", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LectureWeek", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Lectures] ([LectureID], [LectureName], [LectureWeek]) VALUES (" +
                "@LectureID, @LectureName, @LectureWeek);\r\nSELECT LectureID, LectureName, Lecture" +
                "Week FROM Lectures WHERE (LectureID = @LectureID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LectureID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LectureID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LectureName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LectureName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LectureWeek", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LectureWeek", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Lectures] SET [LectureID] = @LectureID, [LectureName] = @LectureName, [LectureWeek] = @LectureWeek WHERE (([LectureID] = @Original_LectureID) AND ([LectureName] = @Original_LectureName) AND ([LectureWeek] = @Original_LectureWeek));
SELECT LectureID, LectureName, LectureWeek FROM Lectures WHERE (LectureID = @LectureID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LectureID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LectureID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LectureName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LectureName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LectureWeek", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LectureWeek", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LectureID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LectureID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LectureName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LectureName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LectureWeek", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LectureWeek", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::EZTutor.Data.Remote.Properties.Settings.Default.eztutorConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT LectureID, LectureName, LectureWeek FROM dbo.Lectures";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(EZTutorDataSet.LecturesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual EZTutorDataSet.LecturesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            EZTutorDataSet.LecturesDataTable dataTable = new EZTutorDataSet.LecturesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(EZTutorDataSet.LecturesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(EZTutorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Lectures");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_LectureID, string Original_LectureName, int Original_LectureWeek) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_LectureID));
            if ((Original_LectureName == null)) {
                throw new global::System.ArgumentNullException("Original_LectureName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_LectureName));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_LectureWeek));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid LectureID, string LectureName, int LectureWeek) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(LectureID));
            if ((LectureName == null)) {
                throw new global::System.ArgumentNullException("LectureName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(LectureName));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(LectureWeek));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Guid LectureID, string LectureName, int LectureWeek, System.Guid Original_LectureID, string Original_LectureName, int Original_LectureWeek) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(LectureID));
            if ((LectureName == null)) {
                throw new global::System.ArgumentNullException("LectureName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(LectureName));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(LectureWeek));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.Guid)(Original_LectureID));
            if ((Original_LectureName == null)) {
                throw new global::System.ArgumentNullException("Original_LectureName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_LectureName));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_LectureWeek));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string LectureName, int LectureWeek, System.Guid Original_LectureID, string Original_LectureName, int Original_LectureWeek) {
            return this.Update(Original_LectureID, LectureName, LectureWeek, Original_LectureID, Original_LectureName, Original_LectureWeek);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SlidesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SlidesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Slides";
            tableMapping.ColumnMappings.Add("SlideID", "SlideID");
            tableMapping.ColumnMappings.Add("SlideName", "SlideName");
            tableMapping.ColumnMappings.Add("LectureID", "LectureID");
            tableMapping.ColumnMappings.Add("TopicID", "TopicID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Slides] WHERE (([SlideID] = @Original_SlideID) AND ([SlideName" +
                "] = @Original_SlideName) AND ([LectureID] = @Original_LectureID) AND ([TopicID] " +
                "= @Original_TopicID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SlideID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SlideID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SlideName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SlideName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LectureID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LectureID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TopicID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TopicID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Slides] ([SlideID], [SlideName], [LectureID], [TopicID]) VALUE" +
                "S (@SlideID, @SlideName, @LectureID, @TopicID);\r\nSELECT SlideID, SlideName, Lect" +
                "ureID, TopicID FROM Slides WHERE (SlideID = @SlideID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SlideID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SlideID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SlideName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SlideName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LectureID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LectureID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TopicID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TopicID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Slides] SET [SlideID] = @SlideID, [SlideName] = @SlideName, [LectureID] = @LectureID, [TopicID] = @TopicID WHERE (([SlideID] = @Original_SlideID) AND ([SlideName] = @Original_SlideName) AND ([LectureID] = @Original_LectureID) AND ([TopicID] = @Original_TopicID));
SELECT SlideID, SlideName, LectureID, TopicID FROM Slides WHERE (SlideID = @SlideID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SlideID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SlideID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SlideName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SlideName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LectureID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LectureID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TopicID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TopicID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SlideID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SlideID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SlideName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SlideName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LectureID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LectureID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TopicID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TopicID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::EZTutor.Data.Remote.Properties.Settings.Default.eztutorConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT SlideID, SlideName, LectureID, TopicID FROM dbo.Slides";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(EZTutorDataSet.SlidesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual EZTutorDataSet.SlidesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            EZTutorDataSet.SlidesDataTable dataTable = new EZTutorDataSet.SlidesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(EZTutorDataSet.SlidesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(EZTutorDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Slides");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_SlideID, string Original_SlideName, System.Guid Original_LectureID, System.Guid Original_TopicID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_SlideID));
            if ((Original_SlideName == null)) {
                throw new global::System.ArgumentNullException("Original_SlideName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_SlideName));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((System.Guid)(Original_LectureID));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((System.Guid)(Original_TopicID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid SlideID, string SlideName, System.Guid LectureID, System.Guid TopicID) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(SlideID));
            if ((SlideName == null)) {
                throw new global::System.ArgumentNullException("SlideName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(SlideName));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.Guid)(LectureID));
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.Guid)(TopicID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Guid SlideID, string SlideName, System.Guid LectureID, System.Guid TopicID, System.Guid Original_SlideID, string Original_SlideName, System.Guid Original_LectureID, System.Guid Original_TopicID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(SlideID));
            if ((SlideName == null)) {
                throw new global::System.ArgumentNullException("SlideName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(SlideName));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.Guid)(LectureID));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.Guid)(TopicID));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.Guid)(Original_SlideID));
            if ((Original_SlideName == null)) {
                throw new global::System.ArgumentNullException("Original_SlideName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_SlideName));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.Guid)(Original_LectureID));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((System.Guid)(Original_TopicID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string SlideName, System.Guid LectureID, System.Guid TopicID, System.Guid Original_SlideID, string Original_SlideName, System.Guid Original_LectureID, System.Guid Original_TopicID) {
            return this.Update(Original_SlideID, SlideName, LectureID, TopicID, Original_SlideID, Original_SlideName, Original_LectureID, Original_TopicID);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private EZ_instructorsTableAdapter _eZ_instructorsTableAdapter;
        
        private TopicsTableAdapter _topicsTableAdapter;
        
        private Ez_student_privsTableAdapter _ez_student_privsTableAdapter;
        
        private Ez_studentsTableAdapter _ez_studentsTableAdapter;
        
        private Ez_topic_contentsTableAdapter _ez_topic_contentsTableAdapter;
        
        private Ez_topic_lecturesTableAdapter _ez_topic_lecturesTableAdapter;
        
        private Ez_topicsTableAdapter _ez_topicsTableAdapter;
        
        private EZ_univsTableAdapter _eZ_univsTableAdapter;
        
        private LecturesTableAdapter _lecturesTableAdapter;
        
        private SlidesTableAdapter _slidesTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public EZ_instructorsTableAdapter EZ_instructorsTableAdapter {
            get {
                return this._eZ_instructorsTableAdapter;
            }
            set {
                this._eZ_instructorsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TopicsTableAdapter TopicsTableAdapter {
            get {
                return this._topicsTableAdapter;
            }
            set {
                this._topicsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public Ez_student_privsTableAdapter Ez_student_privsTableAdapter {
            get {
                return this._ez_student_privsTableAdapter;
            }
            set {
                this._ez_student_privsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public Ez_studentsTableAdapter Ez_studentsTableAdapter {
            get {
                return this._ez_studentsTableAdapter;
            }
            set {
                this._ez_studentsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public Ez_topic_contentsTableAdapter Ez_topic_contentsTableAdapter {
            get {
                return this._ez_topic_contentsTableAdapter;
            }
            set {
                this._ez_topic_contentsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public Ez_topic_lecturesTableAdapter Ez_topic_lecturesTableAdapter {
            get {
                return this._ez_topic_lecturesTableAdapter;
            }
            set {
                this._ez_topic_lecturesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public Ez_topicsTableAdapter Ez_topicsTableAdapter {
            get {
                return this._ez_topicsTableAdapter;
            }
            set {
                this._ez_topicsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public EZ_univsTableAdapter EZ_univsTableAdapter {
            get {
                return this._eZ_univsTableAdapter;
            }
            set {
                this._eZ_univsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public LecturesTableAdapter LecturesTableAdapter {
            get {
                return this._lecturesTableAdapter;
            }
            set {
                this._lecturesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SlidesTableAdapter SlidesTableAdapter {
            get {
                return this._slidesTableAdapter;
            }
            set {
                this._slidesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._eZ_instructorsTableAdapter != null) 
                            && (this._eZ_instructorsTableAdapter.Connection != null))) {
                    return this._eZ_instructorsTableAdapter.Connection;
                }
                if (((this._topicsTableAdapter != null) 
                            && (this._topicsTableAdapter.Connection != null))) {
                    return this._topicsTableAdapter.Connection;
                }
                if (((this._ez_student_privsTableAdapter != null) 
                            && (this._ez_student_privsTableAdapter.Connection != null))) {
                    return this._ez_student_privsTableAdapter.Connection;
                }
                if (((this._ez_studentsTableAdapter != null) 
                            && (this._ez_studentsTableAdapter.Connection != null))) {
                    return this._ez_studentsTableAdapter.Connection;
                }
                if (((this._ez_topic_contentsTableAdapter != null) 
                            && (this._ez_topic_contentsTableAdapter.Connection != null))) {
                    return this._ez_topic_contentsTableAdapter.Connection;
                }
                if (((this._ez_topic_lecturesTableAdapter != null) 
                            && (this._ez_topic_lecturesTableAdapter.Connection != null))) {
                    return this._ez_topic_lecturesTableAdapter.Connection;
                }
                if (((this._ez_topicsTableAdapter != null) 
                            && (this._ez_topicsTableAdapter.Connection != null))) {
                    return this._ez_topicsTableAdapter.Connection;
                }
                if (((this._eZ_univsTableAdapter != null) 
                            && (this._eZ_univsTableAdapter.Connection != null))) {
                    return this._eZ_univsTableAdapter.Connection;
                }
                if (((this._lecturesTableAdapter != null) 
                            && (this._lecturesTableAdapter.Connection != null))) {
                    return this._lecturesTableAdapter.Connection;
                }
                if (((this._slidesTableAdapter != null) 
                            && (this._slidesTableAdapter.Connection != null))) {
                    return this._slidesTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._eZ_instructorsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._topicsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._ez_student_privsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._ez_studentsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._ez_topic_contentsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._ez_topic_lecturesTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._ez_topicsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._eZ_univsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._lecturesTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._slidesTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(EZTutorDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._eZ_univsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.EZ_univs.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._eZ_univsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._ez_topic_contentsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Ez_topic_contents.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._ez_topic_contentsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._lecturesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Lectures.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._lecturesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._topicsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Topics.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._topicsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._eZ_instructorsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.EZ_instructors.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._eZ_instructorsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._slidesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Slides.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._slidesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._ez_topicsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Ez_topics.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._ez_topicsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._ez_studentsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Ez_students.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._ez_studentsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._ez_student_privsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Ez_student_privs.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._ez_student_privsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._ez_topic_lecturesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Ez_topic_lectures.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._ez_topic_lecturesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(EZTutorDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._eZ_univsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.EZ_univs.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._eZ_univsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._ez_topic_contentsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Ez_topic_contents.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._ez_topic_contentsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._lecturesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Lectures.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._lecturesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._topicsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Topics.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._topicsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._eZ_instructorsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.EZ_instructors.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._eZ_instructorsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._slidesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Slides.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._slidesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._ez_topicsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Ez_topics.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._ez_topicsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._ez_studentsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Ez_students.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._ez_studentsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._ez_student_privsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Ez_student_privs.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._ez_student_privsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._ez_topic_lecturesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Ez_topic_lectures.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._ez_topic_lecturesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(EZTutorDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._ez_topic_lecturesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Ez_topic_lectures.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._ez_topic_lecturesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._ez_student_privsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Ez_student_privs.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._ez_student_privsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._ez_studentsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Ez_students.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._ez_studentsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._ez_topicsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Ez_topics.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._ez_topicsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._slidesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Slides.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._slidesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._eZ_instructorsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.EZ_instructors.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._eZ_instructorsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._topicsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Topics.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._topicsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._lecturesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Lectures.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._lecturesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._ez_topic_contentsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Ez_topic_contents.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._ez_topic_contentsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._eZ_univsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.EZ_univs.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._eZ_univsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(EZTutorDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._eZ_instructorsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._eZ_instructorsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._topicsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._topicsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._ez_student_privsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._ez_student_privsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._ez_studentsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._ez_studentsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._ez_topic_contentsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._ez_topic_contentsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._ez_topic_lecturesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._ez_topic_lecturesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._ez_topicsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._ez_topicsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._eZ_univsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._eZ_univsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._lecturesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._lecturesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._slidesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._slidesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._eZ_instructorsTableAdapter != null)) {
                    revertConnections.Add(this._eZ_instructorsTableAdapter, this._eZ_instructorsTableAdapter.Connection);
                    this._eZ_instructorsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._eZ_instructorsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._eZ_instructorsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._eZ_instructorsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._eZ_instructorsTableAdapter.Adapter);
                    }
                }
                if ((this._topicsTableAdapter != null)) {
                    revertConnections.Add(this._topicsTableAdapter, this._topicsTableAdapter.Connection);
                    this._topicsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._topicsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._topicsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._topicsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._topicsTableAdapter.Adapter);
                    }
                }
                if ((this._ez_student_privsTableAdapter != null)) {
                    revertConnections.Add(this._ez_student_privsTableAdapter, this._ez_student_privsTableAdapter.Connection);
                    this._ez_student_privsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._ez_student_privsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._ez_student_privsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._ez_student_privsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._ez_student_privsTableAdapter.Adapter);
                    }
                }
                if ((this._ez_studentsTableAdapter != null)) {
                    revertConnections.Add(this._ez_studentsTableAdapter, this._ez_studentsTableAdapter.Connection);
                    this._ez_studentsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._ez_studentsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._ez_studentsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._ez_studentsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._ez_studentsTableAdapter.Adapter);
                    }
                }
                if ((this._ez_topic_contentsTableAdapter != null)) {
                    revertConnections.Add(this._ez_topic_contentsTableAdapter, this._ez_topic_contentsTableAdapter.Connection);
                    this._ez_topic_contentsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._ez_topic_contentsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._ez_topic_contentsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._ez_topic_contentsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._ez_topic_contentsTableAdapter.Adapter);
                    }
                }
                if ((this._ez_topic_lecturesTableAdapter != null)) {
                    revertConnections.Add(this._ez_topic_lecturesTableAdapter, this._ez_topic_lecturesTableAdapter.Connection);
                    this._ez_topic_lecturesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._ez_topic_lecturesTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._ez_topic_lecturesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._ez_topic_lecturesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._ez_topic_lecturesTableAdapter.Adapter);
                    }
                }
                if ((this._ez_topicsTableAdapter != null)) {
                    revertConnections.Add(this._ez_topicsTableAdapter, this._ez_topicsTableAdapter.Connection);
                    this._ez_topicsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._ez_topicsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._ez_topicsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._ez_topicsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._ez_topicsTableAdapter.Adapter);
                    }
                }
                if ((this._eZ_univsTableAdapter != null)) {
                    revertConnections.Add(this._eZ_univsTableAdapter, this._eZ_univsTableAdapter.Connection);
                    this._eZ_univsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._eZ_univsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._eZ_univsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._eZ_univsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._eZ_univsTableAdapter.Adapter);
                    }
                }
                if ((this._lecturesTableAdapter != null)) {
                    revertConnections.Add(this._lecturesTableAdapter, this._lecturesTableAdapter.Connection);
                    this._lecturesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._lecturesTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._lecturesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._lecturesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._lecturesTableAdapter.Adapter);
                    }
                }
                if ((this._slidesTableAdapter != null)) {
                    revertConnections.Add(this._slidesTableAdapter, this._slidesTableAdapter.Connection);
                    this._slidesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._slidesTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._slidesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._slidesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._slidesTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._eZ_instructorsTableAdapter != null)) {
                    this._eZ_instructorsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._eZ_instructorsTableAdapter]));
                    this._eZ_instructorsTableAdapter.Transaction = null;
                }
                if ((this._topicsTableAdapter != null)) {
                    this._topicsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._topicsTableAdapter]));
                    this._topicsTableAdapter.Transaction = null;
                }
                if ((this._ez_student_privsTableAdapter != null)) {
                    this._ez_student_privsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._ez_student_privsTableAdapter]));
                    this._ez_student_privsTableAdapter.Transaction = null;
                }
                if ((this._ez_studentsTableAdapter != null)) {
                    this._ez_studentsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._ez_studentsTableAdapter]));
                    this._ez_studentsTableAdapter.Transaction = null;
                }
                if ((this._ez_topic_contentsTableAdapter != null)) {
                    this._ez_topic_contentsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._ez_topic_contentsTableAdapter]));
                    this._ez_topic_contentsTableAdapter.Transaction = null;
                }
                if ((this._ez_topic_lecturesTableAdapter != null)) {
                    this._ez_topic_lecturesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._ez_topic_lecturesTableAdapter]));
                    this._ez_topic_lecturesTableAdapter.Transaction = null;
                }
                if ((this._ez_topicsTableAdapter != null)) {
                    this._ez_topicsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._ez_topicsTableAdapter]));
                    this._ez_topicsTableAdapter.Transaction = null;
                }
                if ((this._eZ_univsTableAdapter != null)) {
                    this._eZ_univsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._eZ_univsTableAdapter]));
                    this._eZ_univsTableAdapter.Transaction = null;
                }
                if ((this._lecturesTableAdapter != null)) {
                    this._lecturesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._lecturesTableAdapter]));
                    this._lecturesTableAdapter.Transaction = null;
                }
                if ((this._slidesTableAdapter != null)) {
                    this._slidesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._slidesTableAdapter]));
                    this._slidesTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591